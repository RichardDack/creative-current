This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitattributes
.gitignore
.kiro/specs/framer-to-nextjs-migration/design.md
.kiro/specs/framer-to-nextjs-migration/requirements.md
.kiro/specs/framer-to-nextjs-migration/tasks.md
.kiro/specs/mobile-burger-menu/design.md
.kiro/specs/mobile-burger-menu/requirements.md
.kiro/specs/mobile-burger-menu/tasks.md
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/components/global/Footer.tsx
src/components/global/Header.tsx
src/components/global/index.ts
src/components/global/Layout.tsx
src/components/global/MobileNavOverlay.tsx
src/components/icons/BrowserIcon.tsx
src/components/icons/BurgerIcon.tsx
src/components/icons/CartIcon.tsx
src/components/icons/CheckIcon.tsx
src/components/icons/FlagIcon.tsx
src/components/icons/IconDemo.tsx
src/components/icons/index.ts
src/components/icons/LoadingIcon.tsx
src/components/icons/MegaphoneIcon.tsx
src/components/icons/QuestionIcon.tsx
src/components/icons/README.md
src/components/icons/WindowIcon.tsx
src/components/sections/ContactSection.tsx
src/components/sections/Hero.tsx
src/components/sections/TeamSection.tsx
src/components/sections/WorkSection.tsx
src/components/ui/TeamMember.tsx
src/components/ui/WorkCard.tsx
src/lib/animations/index.ts
src/lib/animations/transitions.ts
src/lib/animations/utils.ts
src/lib/animations/variants.ts
src/lib/data/pricing.ts
src/lib/data/services.ts
src/lib/data/team-members.ts
src/lib/data/work-projects.ts
src/lib/utils/cn.ts
src/styles/components/BurgerIcon.module.css
src/styles/components/ContactSection.module.css
src/styles/components/Footer.module.css
src/styles/components/Header.module.css
src/styles/components/Hero.module.css
src/styles/components/Layout.module.css
src/styles/components/MobileNavOverlay.module.css
src/styles/components/TeamMember.module.css
src/styles/components/TeamSection.module.css
src/styles/components/WorkCard.module.css
src/styles/components/WorkSection.module.css
src/styles/tokens.css
src/types/components.ts
src/types/data.ts
src/types/icons.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
# Auto detect text files and perform LF normalization
* text=auto
</file>

<file path=".kiro/specs/framer-to-nextjs-migration/design.md">
# Design Document

## Overview

This design outlines the migration of a Framer-exported "Agentic" design agency template to a modern Next.js application. The migration will preserve all visual elements, animations, and interactions while creating a maintainable, performant React codebase. The design leverages the existing Next.js project structure and incorporates Framer Motion for animations, CSS Modules for styling, and TypeScript for type safety.

## Architecture

### Technology Stack
- **Framework**: Next.js 15+ with App Router
- **Language**: TypeScript 5+
- **Styling**: CSS Modules + CSS Custom Properties (Design Tokens)
- **Animations**: Framer Motion 12+
- **Images**: Next.js Image component with optimization
- **Fonts**: next/font for Google Fonts optimization
- **Deployment**: Vercel (Free Tier)

### Project Structure
```
src/
├── app/                     # Next.js App Router
│   ├── globals.css         # Global styles and design tokens
│   ├── layout.tsx          # Root layout with fonts and meta
│   └── page.tsx            # Main landing page
├── components/
│   ├── global/             # Site-wide components
│   │   ├── Header.tsx      # Navigation header
│   │   ├── Footer.tsx      # Site footer
│   │   └── Layout.tsx      # Page wrapper
│   ├── sections/           # Page sections
│   │   ├── Hero.tsx        # Hero section with main title
│   │   ├── WorkSection.tsx # Portfolio/work showcase
│   │   ├── AboutSection.tsx# About and team section
│   │   ├── ServicesSection.tsx # Services timeline
│   │   └── PricingSection.tsx  # Pricing plans
│   ├── ui/                 # Reusable UI components
│   │   ├── WorkCard.tsx    # Individual work item
│   │   ├── TeamMember.tsx  # Team member profile
│   │   ├── ServiceCard.tsx # Service offering card
│   │   ├── PricingCard.tsx # Pricing plan card
│   │   └── Button.tsx      # Reusable button component
│   └── icons/              # SVG icon components
│       ├── BrowserIcon.tsx # Browser window icon
│       ├── CheckIcon.tsx   # Checkmark icon
│       ├── LoadingIcon.tsx # Loading spinner icon
│       └── index.ts        # Barrel exports
├── lib/
│   ├── animations/         # Animation configurations
│   │   ├── variants.ts     # Framer Motion variants
│   │   └── transitions.ts  # Animation transitions
│   ├── data/               # Static content data
│   │   ├── work-projects.ts# Portfolio projects
│   │   ├── team-members.ts # Team information
│   │   ├── services.ts     # Service offerings
│   │   └── pricing.ts      # Pricing plans
│   └── utils/
│       ├── cn.ts           # Class name utility
│       └── constants.ts    # App constants
├── styles/
│   ├── tokens.css          # Design system tokens
│   └── components/         # Component-specific CSS Modules
│       ├── Header.module.css
│       ├── Hero.module.css
│       ├── WorkCard.module.css
│       └── [component].module.css
└── types/
    ├── components.ts       # Component prop types
    └── data.ts            # Data structure types
```

## Components and Interfaces

### Core Layout Components

#### Header Component
```typescript
interface HeaderProps {
  variant?: 'light' | 'dark';
  fixed?: boolean;
}

export const Header: React.FC<HeaderProps>
```
- Fixed positioning with backdrop blur
- Responsive navigation menu
- Logo integration
- Smooth scroll navigation links

#### Footer Component
```typescript
export const Footer: React.FC
```
- Contact information
- Social media links
- Copyright and legal text

### Section Components

#### Hero Section
```typescript
interface HeroProps {
  title: string;
  subtitle: string;
  backgroundElements?: React.ReactNode;
}

export const Hero: React.FC<HeroProps>
```
- Large title with slide-in animation (x: 192 → 0)
- Subtitle with opposite slide animation
- Animated background blur elements
- Responsive typography scaling

#### Work Section
```typescript
interface WorkSectionProps {
  projects: WorkProject[];
  title: string;
}

export const WorkSection: React.FC<WorkSectionProps>
```
- Grid layout for project cards
- Staggered animation entrance
- Scroll-triggered animations
- Responsive grid (1-2-3 columns)

#### About Section
```typescript
interface AboutSectionProps {
  description: string;
  teamMembers: TeamMember[];
}

export const AboutSection: React.FC<AboutSectionProps>
```
- Company description
- Team member profiles
- Complex scale and slide animations
- Image optimization for team photos

### UI Components

#### Work Card
```typescript
interface WorkCardProps {
  project: WorkProject;
  index: number;
  onHover?: () => void;
}

export const WorkCard: React.FC<WorkCardProps>
```
- Project image with Next.js Image optimization
- Hover scale animation (scale: 1 → 1.02)
- Category and duration display
- Staggered entrance animation

#### Team Member
```typescript
interface TeamMemberProps {
  member: TeamMember;
  variant?: 'default' | 'compact';
}

export const TeamMember: React.FC<TeamMemberProps>
```
- Profile image with optimization
- Name, title, and quote
- Social media links
- Hover interactions

### Icon Components

All SVG icons will be converted to React components with consistent interfaces:

```typescript
interface IconProps {
  size?: number | string;
  color?: string;
  className?: string;
}

export const BrowserIcon: React.FC<IconProps>
export const CheckIcon: React.FC<IconProps>
export const LoadingIcon: React.FC<IconProps>
```

## Data Models

### Core Data Types

```typescript
// Work Project
interface WorkProject {
  id: string;
  title: string;
  category: string;
  client: string;
  duration: string;
  image: string;
  thumbnail?: string;
  description?: string;
  link?: string;
  tags: string[];
}

// Team Member
interface TeamMember {
  id: string;
  name: string;
  title: string;
  quote: string;
  image: string;
  socialLinks: {
    linkedin?: string;
    twitter?: string;
    portfolio?: string;
    email?: string;
  };
}

// Service Offering
interface Service {
  id: string;
  title: string;
  description: string;
  icon: React.ComponentType<IconProps>;
  features: string[];
  duration?: string;
}

// Pricing Plan
interface PricingPlan {
  id: string;
  name: string;
  price: number;
  period: 'month' | 'year' | 'project';
  features: string[];
  popular?: boolean;
  ctaText: string;
  ctaLink: string;
  description?: string;
}
```

## Animation System

### Design Tokens for Animations

Based on the original Framer animation data, the following animation variants will be implemented:

```typescript
// Primary slide animations (from Framer data)
export const slideInLeft: Variants = {
  initial: { x: -192, opacity: 0 },
  animate: {
    x: 0,
    opacity: 1,
    transition: {
      type: "spring",
      stiffness: 200,
      damping: 30
    }
  }
};

export const slideInRight: Variants = {
  initial: { x: 192, opacity: 0 },
  animate: {
    x: 0,
    opacity: 1,
    transition: {
      type: "spring",
      stiffness: 200,
      damping: 30
    }
  }
};

// Scroll-triggered animations
export const slideInUp: Variants = {
  initial: { y: -40, opacity: 0.001 },
  animate: {
    y: 0,
    opacity: 1,
    transition: {
      type: "spring",
      stiffness: 150,
      damping: 40
    }
  }
};

// Stagger container for work cards
export const staggerContainer: Variants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.1
    }
  }
};

// Complex scale and slide (for about section)
export const scaleAndSlide: Variants = {
  initial: { scale: 0.1, x: -96, opacity: 0 },
  animate: {
    scale: 1,
    x: 0,
    opacity: 1,
    transition: {
      type: "spring",
      stiffness: 200,
      damping: 30
    }
  }
};
```

### Animation Configuration

```typescript
// Spring configurations matching Framer
export const springConfig = {
  type: "spring" as const,
  stiffness: 200,
  damping: 30
};

export const quickSpring = {
  type: "spring" as const,
  stiffness: 450,
  damping: 90
};

// Accessibility considerations
export const getAnimationProps = () => {
  const prefersReducedMotion = typeof window !== 'undefined' &&
    window.matchMedia('(prefers-reduced-motion: reduce)').matches;
  
  return {
    initial: prefersReducedMotion ? false : "initial",
    animate: prefersReducedMotion ? false : "animate",
    transition: prefersReducedMotion ? { duration: 0 } : undefined
  };
};
```

## Styling System

### Design Tokens

All original Framer CSS custom properties will be converted to semantic CSS variables:

```css
:root {
  /* Colors (from original Framer tokens) */
  --color-primary: rgb(49, 175, 180);           /* token-633663d4 */
  --color-background-dark: rgb(14, 26, 36);     /* token-51170b41 */
  --color-background-light: rgb(20, 33, 45);    /* token-e76238c2 */
  --color-text-muted: rgb(186, 189, 198);       /* token-dd3bc34b */
  --color-border-light: rgb(230, 230, 230);     /* token-cf55a365 */
  --color-accent-red: rgb(180, 54, 49);         /* token-da3bfa35 */
  
  /* Typography */
  --font-display: "Inter Tight", sans-serif;
  --font-body: "Plus Jakarta Sans", sans-serif;
  --font-headline: "Wix Madefor Display", sans-serif;
  
  /* Spacing Scale */
  --space-xs: 0.25rem;
  --space-sm: 0.5rem;
  --space-md: 1rem;
  --space-lg: 1.5rem;
  --space-xl: 2rem;
  --space-2xl: 3rem;
  --space-3xl: 4rem;
  
  /* Breakpoints */
  --breakpoint-mobile: 390px;
  --breakpoint-tablet: 810px;
  --breakpoint-desktop: 1200px;
  
  /* Animation */
  --duration-fast: 0.2s;
  --duration-normal: 0.3s;
  --duration-slow: 0.6s;
  --ease-out: cubic-bezier(0.44, 0, 0.56, 1);
}
```

### CSS Modules Structure

Each component will have its own CSS module following this pattern:

```css
/* Hero.module.css */
.hero {
  position: relative;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  padding: var(--space-3xl) var(--space-lg);
  overflow: hidden;
}

.title {
  font-family: var(--font-display);
  font-size: clamp(2.5rem, 8vw, 5rem);
  font-weight: 900;
  line-height: 1;
  color: var(--color-primary);
  margin-bottom: var(--space-lg);
}

.blurElement {
  position: absolute;
  top: 20%;
  right: 10%;
  width: 200px;
  height: 200px;
  background: var(--color-primary);
  border-radius: 1rem;
  filter: blur(60px);
  opacity: 0.3;
  transform: rotate(20deg);
  z-index: -1;
}

/* Responsive adjustments */
@media (max-width: 809px) {
  .hero {
    padding: var(--space-2xl) var(--space-md);
    text-align: center;
  }
  
  .description {
    max-width: 100%;
  }
}
```

## Error Handling

### Component Error Boundaries

```typescript
interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

class ComponentErrorBoundary extends React.Component<
  React.PropsWithChildren<{}>,
  ErrorBoundaryState
> {
  // Error boundary implementation for graceful degradation
}
```

### Animation Fallbacks

- Detect `prefers-reduced-motion` and disable animations
- Provide static fallbacks for all animated elements
- Graceful degradation for older browsers

### Image Loading

- Placeholder images for failed loads
- Progressive loading with blur-up effect
- Responsive image sizing with proper aspect ratios

## Testing Strategy

### Component Testing
- Unit tests for all components using Jest and React Testing Library
- Visual regression testing for design consistency
- Accessibility testing with axe-core

### Animation Testing
- Test animation variants and transitions
- Verify reduced motion preferences are respected
- Performance testing for animation smoothness

### Integration Testing
- End-to-end testing with Playwright
- Cross-browser compatibility testing
- Mobile responsiveness testing

### Performance Testing
- Lighthouse CI integration
- Core Web Vitals monitoring
- Bundle size analysis

## Performance Optimization

### Image Optimization
- Next.js Image component with proper sizing
- WebP/AVIF format support
- Lazy loading for below-fold images
- Responsive image sets

### Font Optimization
- next/font for Google Fonts optimization
- Font display: swap for better loading
- Preload critical fonts

### Bundle Optimization
- Code splitting by route and component
- Tree shaking for unused code
- Dynamic imports for heavy components
- Framer Motion optimization with optimizePackageImports

### Animation Performance
- Use transform properties for better performance
- will-change property management
- Reduced motion preferences
- GPU acceleration for smooth animations

## Accessibility

### WCAG Compliance
- Proper heading hierarchy
- Alt text for all images
- Keyboard navigation support
- Focus management for animations

### Screen Reader Support
- Semantic HTML structure
- ARIA labels where needed
- Skip links for navigation
- Descriptive link text

### Motion Accessibility
- Respect prefers-reduced-motion
- Provide static alternatives
- Ensure animations don't cause seizures
- Timeout controls for auto-playing content
</file>

<file path=".kiro/specs/framer-to-nextjs-migration/requirements.md">
# Requirements Document

## Introduction

This feature involves migrating a Framer-exported static website to a modern Next.js application. The original Framer site is a design agency template called "Agentic" with complex animations, custom styling, and responsive design. The migration will preserve all visual elements, animations, and functionality while converting to a maintainable React/Next.js codebase with improved performance and developer experience.

## Requirements

### Requirement 1

**User Story:** As a website visitor, I want to experience the same visual design and animations as the original Framer site, so that the migration is seamless and maintains the intended user experience.

#### Acceptance Criteria

1. WHEN the migrated site loads THEN the visual design SHALL match the original Framer export exactly
2. WHEN animations trigger THEN they SHALL replicate the original spring physics and timing from Framer
3. WHEN viewing on different screen sizes THEN the responsive behavior SHALL match the original breakpoints (1200px/810px/390px)
4. WHEN interacting with elements THEN hover states and micro-interactions SHALL behave identically to the original

### Requirement 2

**User Story:** As a developer, I want clean, maintainable React components with TypeScript, so that the codebase is scalable and easy to modify.

#### Acceptance Criteria

1. WHEN examining the codebase THEN all components SHALL be written in TypeScript with proper type definitions
2. WHEN reviewing component structure THEN components SHALL follow the established architecture (global, sections, ui)
3. WHEN looking at styling THEN CSS SHALL use CSS Modules with design tokens for consistency
4. WHEN checking animations THEN Framer Motion SHALL be used with organized variant configurations

### Requirement 3

**User Story:** As a content manager, I want the ability to easily update content and assets, so that I can maintain the site without developer intervention.

#### Acceptance Criteria

1. WHEN content needs updating THEN static data SHALL be organized in separate data files
2. WHEN images need changing THEN assets SHALL be optimized and properly referenced through Next.js Image component
3. WHEN text content changes THEN content SHALL be easily editable in dedicated data files
4. WHEN new sections are added THEN the component structure SHALL support easy extension

### Requirement 4

**User Story:** As a site owner, I want optimal performance and SEO, so that the site loads quickly and ranks well in search engines.

#### Acceptance Criteria

1. WHEN the site loads THEN it SHALL achieve better Core Web Vitals scores than the original Framer export
2. WHEN search engines crawl THEN proper meta tags and structured data SHALL be present
3. WHEN images load THEN they SHALL be optimized with Next.js Image component and proper formats (WebP/AVIF)
4. WHEN fonts load THEN they SHALL be optimized using next/font to prevent layout shift

### Requirement 5

**User Story:** As a developer, I want to preserve all original animations and interactions, so that the dynamic feel of the site is maintained.

#### Acceptance Criteria

1. WHEN elements enter the viewport THEN scroll-triggered animations SHALL fire with the same timing as the original
2. WHEN the hero section loads THEN the slide-in animations SHALL match the original spring physics (stiffness: 200, damping: 30)
3. WHEN work cards are displayed THEN the stagger animation SHALL replicate the original 0.1s delay between items
4. WHEN hover interactions occur THEN scale and opacity changes SHALL match the original behavior

### Requirement 6

**User Story:** As a site administrator, I want the site to be deployable on Vercel's free tier, so that hosting costs are minimized while maintaining performance.

#### Acceptance Criteria

1. WHEN deploying to Vercel THEN the build SHALL complete successfully within free tier limits
2. WHEN the site is live THEN it SHALL load within 2 seconds on average
3. WHEN checking bundle size THEN JavaScript bundles SHALL be optimized and code-split appropriately
4. WHEN monitoring usage THEN bandwidth and function execution SHALL stay within Vercel free tier limits

### Requirement 7

**User Story:** As a developer, I want to extract and convert all original design tokens and styling, so that the visual consistency is maintained and future updates are systematic.

#### Acceptance Criteria

1. WHEN examining CSS custom properties THEN all original Framer tokens SHALL be converted to CSS variables
2. WHEN checking color usage THEN the primary color (rgb(49, 175, 180)) and all other brand colors SHALL be preserved exactly
3. WHEN reviewing typography THEN all font families (Inter Tight, Plus Jakarta Sans, Wix Madefor Display) SHALL be properly loaded
4. WHEN inspecting spacing THEN the original layout measurements and responsive behavior SHALL be maintained

### Requirement 8

**User Story:** As a developer, I want all SVG icons and graphics to be converted to React components, so that they are optimized and easily maintainable.

#### Acceptance Criteria

1. WHEN SVG icons are used THEN they SHALL be converted to React components with proper TypeScript interfaces
2. WHEN icons need styling THEN they SHALL accept color and size props for flexibility
3. WHEN examining the icon system THEN all icons SHALL be organized with barrel exports for easy importing
4. WHEN checking performance THEN SVG components SHALL be optimized and tree-shakeable

### Requirement 9

**User Story:** As a developer, I want comprehensive documentation and clear project structure, so that future maintenance and feature additions are straightforward.

#### Acceptance Criteria

1. WHEN onboarding new developers THEN clear documentation SHALL exist for the project structure and conventions
2. WHEN adding new components THEN the established patterns SHALL be easy to follow and extend
3. WHEN modifying animations THEN the animation system SHALL be well-documented with examples
4. WHEN updating content THEN the data management approach SHALL be clearly documented
</file>

<file path=".kiro/specs/framer-to-nextjs-migration/tasks.md">
# Implementation Plan

- [x] 1. Extract and convert design tokens from Framer HTML





  - Parse the original Framer HTML files to extract all CSS custom properties and color values
  - Convert Framer tokens (token-633663d4, token-51170b41, etc.) to semantic CSS variable names
  - Create comprehensive design token system in styles/tokens.css with colors, typography, spacing, and breakpoints
  - _Requirements: 7.1, 7.2, 7.3, 7.4_

- [x] 2. Set up font optimization and loading





  - Configure next/font for Google Fonts (Inter Tight, Plus Jakarta Sans, Wix Madefor Display)
  - Update app/layout.tsx to include optimized font loading with proper fallbacks
  - Implement font display: swap strategy for better loading performance
  - _Requirements: 4.4, 7.3_

- [x] 3. Create SVG icon components from Framer assets






  - Extract all SVG icons from the Framer HTML (browser, check, loading, etc.)
  - Convert SVGs to React components with TypeScript interfaces accepting size, color, and className props
  - Implement barrel exports in components/icons/index.ts for easy importing
  - Optimize SVG components for tree-shaking and performance
  - _Requirements: 8.1, 8.2, 8.3, 8.4_

- [x] 4. Implement animation system with Framer Motion variants






  - Create lib/animations/variants.ts with all animation variants extracted from Framer appear data
  - Implement slideInLeft, slideInRight, slideInUp, scaleAndSlide, and staggerContainer variants
  - Configure spring physics to match original Framer settings (stiffness: 200, damping: 30)
  - Add accessibility support with prefers-reduced-motion detection
  - _Requirements: 5.1, 5.2, 5.3, 5.4_

- [x] 5. Create data models and static content files






  - Define TypeScript interfaces for WorkProject, TeamMember, Service, and PricingPlan in types/data.ts
  - Create lib/data/work-projects.ts with portfolio project data extracted from Framer content
  - Create lib/data/team-members.ts with team information and social links
  - Create lib/data/services.ts and lib/data/pricing.ts with service and pricing data
  - _Requirements: 3.1, 3.3, 2.1_

- [x] 6. Build Header component with navigation






  - Create components/global/Header.tsx with TypeScript interface for variant and fixed props
  - Implement responsive navigation menu with smooth scroll links
  - Add backdrop blur effect and fixed positioning matching original design
  - Style with CSS Modules using design tokens for consistent spacing and colors
  - _Requirements: 1.1, 1.3, 2.2_

- [ ] 7. Build Hero section with slide animations
  - Create components/sections/Hero.tsx with title, subtitle, and background elements
  - Implement slideInLeft animation for main title (x: 192 → 0) with spring physics
  - Add slideInRight animation for subtitle with opposite direction
  - Create animated background blur elements with rotation and opacity effects
  - Implement responsive typography scaling using clamp() functions
  - _Requirements: 1.1, 1.2, 5.2, 7.4_

- [x] 8. Create WorkCard component with hover animations



  - Build components/ui/WorkCard.tsx with project data interface and index prop
  - Integrate Next.js Image component for optimized project images with proper sizing
  - Implement hover scale animation (scale: 1 → 1.02) with smooth transitions
  - Add staggered entrance animation based on card index with 0.1s delays
  - Style with CSS Modules for consistent card layout and responsive behavior
  - _Requirements: 1.1, 1.4, 4.3, 5.4_

- [x] 9. Build WorkSection with staggered grid animations





  - Create components/sections/WorkSection.tsx accepting projects array and title
  - Implement responsive grid layout (1-2-3 columns) using CSS Grid
  - Add staggerContainer animation with scroll-triggered entrance effects
  - Integrate WorkCard components with proper data mapping and key props
  - Style section with proper spacing and responsive breakpoints
  - _Requirements: 1.1, 1.3, 5.4, 7.4_

- [ ] 10. Create TeamMember component with profile display
  - Build components/ui/TeamMember.tsx with member data interface and variant prop
  - Implement optimized profile images using Next.js Image component
  - Add social media links with proper accessibility attributes
  - Create hover interactions for profile cards with subtle animations
  - Style with CSS Modules for consistent profile layout
  - _Requirements: 1.1, 3.2, 4.3_

- [ ] 11. Build AboutSection with complex animations
  - Create components/sections/AboutSection.tsx with description and team members
  - Implement scaleAndSlide animation (scale: 0.1 → 1, x: -96 → 0) for section entrance
  - Integrate TeamMember components with proper data mapping
  - Add scroll-triggered animations with intersection observer
  - Style section with proper typography and spacing using design tokens
  - _Requirements: 1.1, 1.2, 5.1, 7.4_

- [ ] 12. Create PricingCard and PricingSection components
  - Build components/ui/PricingCard.tsx with pricing plan interface and popular flag
  - Implement card hover effects and call-to-action button styling
  - Create components/sections/PricingSection.tsx with pricing toggle functionality
  - Add entrance animations for pricing cards with staggered timing
  - Style components with CSS Modules using design tokens for consistency
  - _Requirements: 1.1, 2.2, 3.1_

- [ ] 13. Build Footer component with contact information
  - Create components/global/Footer.tsx with contact details and social links
  - Implement responsive layout for footer content sections
  - Add proper accessibility attributes for all links and contact information
  - Style with CSS Modules using design tokens for consistent spacing
  - _Requirements: 1.1, 2.2_

- [ ] 14. Create main page layout and integrate all sections
  - Update app/page.tsx to integrate all section components (Hero, Work, About, Pricing)
  - Implement proper data flow from static data files to components
  - Add scroll-triggered animations using Framer Motion's viewport detection
  - Ensure proper component ordering and responsive behavior
  - _Requirements: 1.1, 3.2, 5.1_

- [ ] 15. Implement responsive design and breakpoint handling
  - Update all CSS Modules to include responsive styles for mobile (390px), tablet (810px), and desktop (1200px)
  - Test and adjust component layouts for all breakpoint ranges
  - Ensure typography scales properly across all screen sizes
  - Verify animation performance on mobile devices
  - _Requirements: 1.3, 7.4_

- [ ] 16. Optimize images and implement Next.js Image component
  - Replace all image references with Next.js Image component
  - Configure proper sizes prop for responsive images
  - Implement priority loading for above-fold images
  - Add proper alt text and accessibility attributes for all images
  - _Requirements: 4.3, 3.2_

- [ ] 17. Add SEO optimization and meta tags
  - Update app/layout.tsx with proper meta tags, Open Graph, and Twitter Card data
  - Implement structured data for business information
  - Add proper heading hierarchy throughout all components
  - Configure sitemap and robots.txt for search engine optimization
  - _Requirements: 4.2_

- [ ] 18. Implement performance optimizations
  - Configure bundle splitting and code optimization in next.config.ts
  - Add dynamic imports for heavy components below the fold
  - Implement proper loading states and skeleton screens
  - Optimize Framer Motion bundle with optimizePackageImports configuration
  - _Requirements: 4.1, 6.3_

- [ ] 19. Add basic error handling and accessibility features
  - Implement fallback UI for failed image loads
  - Add proper ARIA labels and semantic HTML structure throughout components
  - Add skip links and ensure proper heading hierarchy
  - Implement keyboard navigation support for interactive elements
  - _Requirements: 1.1, 2.1_

- [ ] 20. Configure Vercel deployment
  - Set up Vercel deployment with proper build configuration
  - Verify build process works correctly and site loads properly
  - Configure custom domain if needed
  - _Requirements: 6.1, 6.2_
</file>

<file path=".kiro/specs/mobile-burger-menu/design.md">
# Design Document

## Overview

The mobile burger menu will be integrated into the existing Header component to provide navigation functionality on mobile devices. The design maintains visual consistency with the current header while adding a responsive navigation overlay that appears when the hero navigation is hidden on smaller screens.

## Architecture

### Component Structure
- **Header Component**: Enhanced to include burger menu functionality
- **Mobile Navigation Overlay**: Full-screen navigation menu for mobile
- **Burger Icon**: Animated hamburger/close icon
- **Navigation Items**: Same items as hero navigation (WORK, ABOUT, SERVICES, CONTACT)

### Responsive Behavior
- **Desktop (≥768px)**: Burger menu hidden, hero navigation visible
- **Mobile (<768px)**: Burger menu visible, hero navigation hidden
- **Transition**: Smooth show/hide based on viewport changes

## Components and Interfaces

### Enhanced Header Component
```typescript
interface HeaderProps {
  fixed?: boolean;
  variant?: 'dark' | 'light';
}

interface MobileMenuState {
  isOpen: boolean;
  isAnimating: boolean;
}
```

### Burger Menu Icon Component
- Animated hamburger icon that transforms to X when menu is open
- Three horizontal lines that animate to form close icon
- Positioned in top-right area of header (replacing or alongside QR code)

### Mobile Navigation Overlay
- Full-screen overlay with dark background
- Centered navigation items with large, touch-friendly targets
- Same navigation items as hero section
- Smooth slide-in animation from top or right
- Close button or tap-outside-to-close functionality

## Data Models

### Navigation Items
```typescript
interface NavigationItem {
  name: string;
  href: string;
  id: string;
}

const navigationItems: NavigationItem[] = [
  { name: 'WORK', href: '#work-section', id: 'work' },
  { name: 'ABOUT', href: '#about-section', id: 'about' },
  { name: 'SERVICES', href: '#services', id: 'services' },
  { name: 'CONTACT', href: '#footer-background', id: 'contact' },
];
```

### Menu State Management
```typescript
interface MenuState {
  isOpen: boolean;
  activeItem: string | null;
  isAnimating: boolean;
}
```

## Visual Design

### Burger Icon Design
- **Size**: 24px × 24px
- **Lines**: 3 horizontal lines, 2px height, 4px spacing
- **Color**: Matches existing header text color (--color-text-muted)
- **Animation**: Smooth transform to X shape (300ms ease-out)
- **Position**: Top-right, aligned with existing QR code placeholder

### Mobile Menu Overlay
- **Background**: Semi-transparent dark overlay (rgba(20, 33, 45, 0.95))
- **Backdrop Filter**: Blur effect for depth
- **Animation**: Slide in from right (400ms ease-out)
- **Z-index**: 1001 (above header)

### Navigation Items Styling
- **Typography**: Same as hero navigation (--font-ui, uppercase)
- **Size**: Large touch targets (minimum 44px height)
- **Spacing**: Generous vertical spacing (32px between items)
- **Hover State**: Teal color transition (--color-primary)
- **Active State**: Underline or background highlight

### Layout Structure
```
Mobile Menu Overlay
├── Close Button (top-right)
├── Navigation Container (centered)
│   ├── WORK
│   ├── ABOUT  
│   ├── SERVICES
│   └── CONTACT
└── Background Overlay
```

## Error Handling

### Viewport Transition Handling
- Graceful menu closure when transitioning from mobile to desktop
- Prevent menu state conflicts during rapid viewport changes
- Ensure proper cleanup of event listeners

### Touch/Click Handling
- Prevent accidental menu triggers
- Handle touch events properly on mobile devices
- Debounce rapid menu toggle attempts

### Accessibility Error Prevention
- Ensure focus trap works correctly
- Handle keyboard navigation edge cases
- Provide fallback for reduced motion preferences

## Testing Strategy

### Unit Tests
- Burger icon animation states
- Menu open/close functionality
- Navigation item click handling
- Responsive visibility logic

### Integration Tests
- Header component with burger menu integration
- Smooth scrolling behavior from mobile menu
- Viewport transition handling
- Focus management and keyboard navigation

### Visual Regression Tests
- Burger icon appearance and animation
- Mobile menu overlay positioning
- Navigation item styling and hover states
- Cross-browser compatibility

### Accessibility Tests
- Screen reader compatibility
- Keyboard navigation flow
- Focus trap functionality
- ARIA labels and roles
- Color contrast compliance

### Responsive Tests
- Menu visibility at different breakpoints
- Touch target sizes on various devices
- Animation performance on mobile devices
- Orientation change handling

## Implementation Notes

### CSS Architecture
- Extend existing Header.module.css with mobile menu styles
- Use CSS custom properties for consistent theming
- Implement smooth animations with CSS transitions
- Follow existing naming conventions and BEM methodology

### JavaScript/TypeScript
- Use React hooks for state management (useState, useEffect)
- Implement proper cleanup for event listeners
- Use Framer Motion for smooth animations (consistent with existing code)
- Follow existing TypeScript patterns and interfaces

### Performance Considerations
- Lazy load mobile menu styles only when needed
- Optimize animations for 60fps performance
- Minimize reflows during menu transitions
- Use transform properties for GPU acceleration

### Browser Support
- Modern browsers with CSS Grid and Flexbox support
- Touch event handling for mobile devices
- Fallbacks for older browsers without backdrop-filter
- Reduced motion preferences support
</file>

<file path=".kiro/specs/mobile-burger-menu/requirements.md">
# Requirements Document

## Introduction

This feature adds a mobile-responsive burger menu to the website header that provides navigation functionality when the hero section's large navigation links are hidden on mobile devices. The burger menu will ensure users can access all navigation items (WORK, ABOUT, SERVICES, CONTACT) on smaller screens while maintaining the existing desktop experience.

## Requirements

### Requirement 1

**User Story:** As a mobile user, I want to access navigation options through a burger menu, so that I can navigate to different sections of the website when the hero navigation is hidden.

#### Acceptance Criteria

1. WHEN the viewport width is below 768px THEN the system SHALL display a burger menu icon in the header
2. WHEN the burger menu icon is clicked THEN the system SHALL open a full-screen or overlay navigation menu
3. WHEN the navigation menu is open THEN the system SHALL display all navigation items (WORK, ABOUT, SERVICES, CONTACT)
4. WHEN a navigation item is clicked THEN the system SHALL close the menu and scroll to the target section
5. WHEN the navigation menu is open THEN the system SHALL provide a close button or allow closing by clicking the burger icon again

### Requirement 2

**User Story:** As a mobile user, I want the burger menu to have smooth animations, so that the navigation experience feels polished and professional.

#### Acceptance Criteria

1. WHEN the burger menu opens THEN the system SHALL animate the menu appearance with a smooth transition
2. WHEN the burger menu closes THEN the system SHALL animate the menu disappearance with a smooth transition
3. WHEN hovering over navigation items THEN the system SHALL provide visual feedback through hover states
4. WHEN the burger icon is clicked THEN the system SHALL animate the icon transformation (hamburger to X)

### Requirement 3

**User Story:** As a desktop user, I want the burger menu to remain hidden, so that the existing hero navigation experience is preserved.

#### Acceptance Criteria

1. WHEN the viewport width is 768px or above THEN the system SHALL hide the burger menu icon
2. WHEN on desktop THEN the system SHALL maintain the existing hero navigation functionality
3. WHEN transitioning between mobile and desktop viewports THEN the system SHALL automatically show/hide the burger menu appropriately

### Requirement 4

**User Story:** As a user with accessibility needs, I want the burger menu to be keyboard navigable and screen reader friendly, so that I can use the navigation regardless of my abilities.

#### Acceptance Criteria

1. WHEN using keyboard navigation THEN the system SHALL allow opening the burger menu with Enter or Space
2. WHEN the menu is open THEN the system SHALL trap focus within the menu
3. WHEN using a screen reader THEN the system SHALL provide appropriate ARIA labels and roles
4. WHEN pressing Escape THEN the system SHALL close the burger menu
5. WHEN the menu opens THEN the system SHALL focus the first navigation item

### Requirement 5

**User Story:** As a user, I want the burger menu to integrate seamlessly with the existing design, so that it feels like a natural part of the website.

#### Acceptance Criteria

1. WHEN viewing the burger menu THEN the system SHALL use the same color scheme and typography as the existing header
2. WHEN the menu is open THEN the system SHALL maintain visual consistency with the site's design language
3. WHEN interacting with navigation items THEN the system SHALL use the same smooth scrolling behavior as the hero navigation
4. WHEN the menu is displayed THEN the system SHALL position it appropriately without interfering with other UI elements
</file>

<file path=".kiro/specs/mobile-burger-menu/tasks.md">
# Implementation Plan

- [x] 1. Create burger menu icon component





  - Create a new BurgerIcon component with animated hamburger/close states
  - Implement three-line hamburger icon that transforms to X when active
  - Add proper TypeScript interfaces for icon props (isOpen, onClick, variant)
  - Style with CSS modules following existing design system patterns
  - _Requirements: 1.1, 2.4_

- [x] 2. Add mobile menu state management to Header component





  - Add useState hook for mobile menu open/closed state
  - Add useState hook for animation state to prevent rapid toggling
  - Implement toggle function for opening/closing mobile menu
  - Add useEffect for handling viewport changes and auto-closing menu on desktop
  - _Requirements: 1.1, 1.5, 3.3_

- [x] 3. Create mobile navigation overlay component





  - Create MobileNavOverlay component with full-screen dark background
  - Implement navigation items list with same items as hero navigation
  - Add smooth scrolling functionality for navigation links
  - Style overlay with backdrop blur and semi-transparent background
  - _Requirements: 1.2, 1.3, 5.3_

- [x] 4. Integrate burger icon into Header component




  - Add burger icon to Header component positioned in top-right area
  - Implement responsive visibility (hidden on desktop, visible on mobile)
  - Connect burger icon click handler to mobile menu state
  - Ensure proper z-index and positioning relative to existing header elements
  - _Requirements: 1.1, 3.1, 5.4_

- [x] 5. Add mobile menu animations with Framer Motion





  - Implement slide-in animation for mobile menu overlay (from right or top)
  - Add fade-in animation for navigation items with staggered delays
  - Create smooth burger icon transformation animation
  - Add exit animations for menu closing
  - _Requirements: 2.1, 2.2, 2.4_

- [ ] 6. Implement accessibility features
  - Add proper ARIA labels and roles to burger icon and mobile menu
  - Implement focus trap within mobile menu when open
  - Add keyboard navigation support (Enter/Space to open, Escape to close)
  - Ensure first navigation item receives focus when menu opens
  - Add screen reader announcements for menu state changes
  - _Requirements: 4.1, 4.2, 4.3, 4.4, 4.5_

- [ ] 7. Add responsive CSS styles for mobile menu
  - Create CSS module styles for mobile menu overlay and navigation items
  - Implement responsive breakpoints to show/hide burger menu appropriately
  - Style navigation items with large touch targets and proper spacing
  - Add hover states and transitions consistent with existing design
  - _Requirements: 1.1, 3.1, 3.2, 5.1, 5.2_

- [ ] 8. Handle menu closing interactions
  - Implement click-outside-to-close functionality for mobile menu
  - Add close button or allow burger icon to close menu when open
  - Ensure menu closes when navigation item is clicked
  - Handle viewport resize to close menu when transitioning to desktop
  - _Requirements: 1.4, 1.5, 3.3_

- [ ] 9. Add smooth scrolling integration
  - Implement same smooth scrolling behavior as hero navigation
  - Ensure menu closes before scrolling to target section
  - Add proper scroll offset handling for fixed header
  - Test scrolling behavior across different screen sizes
  - _Requirements: 1.4, 5.3_

- [ ] 10. Create unit tests for mobile menu functionality
  - Write tests for burger icon component (open/close states, click handling)
  - Test mobile menu state management (open, close, toggle functions)
  - Test responsive visibility logic for different viewport sizes
  - Test navigation item click handling and smooth scrolling
  - _Requirements: 1.1, 1.2, 1.3, 1.4_

- [ ] 11. Add accessibility tests and keyboard navigation tests
  - Test focus trap functionality within mobile menu
  - Test keyboard navigation (Tab, Enter, Space, Escape keys)
  - Test screen reader compatibility and ARIA label announcements
  - Verify proper focus management when menu opens and closes
  - _Requirements: 4.1, 4.2, 4.3, 4.4, 4.5_

- [ ] 12. Optimize performance and add reduced motion support
  - Add CSS prefers-reduced-motion media query support
  - Optimize animations for smooth 60fps performance on mobile
  - Ensure proper cleanup of event listeners and timeouts
  - Test performance on various mobile devices and browsers
  - _Requirements: 2.1, 2.2_
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="src/components/global/index.ts">
// src/components/global/index.ts
export { Header } from './Header';
export { Footer } from './Footer';
export { Layout } from './Layout';
export { MobileNavOverlay } from './MobileNavOverlay';
</file>

<file path="src/components/icons/BrowserIcon.tsx">
import React from 'react';

export interface IconProps {
  size?: number | string;
  color?: string;
  className?: string;
}

export const BrowserIcon: React.FC<IconProps> = ({ 
  size = 24, 
  color = 'currentColor', 
  className = '' 
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 50 50"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M 48.958 43.75 L 1.041 43.75 C 0.465 43.749 -0.001 43.283 -0.002 42.708 L -0.002 7.291 C -0.002 6.717 0.466 6.248 1.041 6.248 L 48.958 6.248 C 49.531 6.248 50 6.717 50 7.291 L 50 42.708 C 50 43.281 49.531 43.75 48.958 43.75 Z M 2.083 41.667 L 47.916 41.667 L 47.916 8.334 L 2.083 8.334 Z M 47.917 16.667 L 2.084 16.667 C 1.531 16.637 1.098 16.179 1.098 15.625 C 1.098 15.071 1.531 14.613 2.084 14.583 L 47.917 14.583 C 48.491 14.583 48.959 15.052 48.959 15.625 C 48.959 16.198 48.491 16.667 47.917 16.667 Z M 8.333 11.458 C 8.332 12.034 7.865 12.5 7.289 12.5 C 6.713 12.5 6.246 12.032 6.247 11.456 C 6.247 10.88 6.715 10.414 7.291 10.414 C 7.867 10.414 8.333 10.882 8.333 11.458 Z M 12.5 11.458 C 12.5 12.034 12.032 12.5 11.456 12.5 C 10.88 12.5 10.414 12.032 10.414 11.456 C 10.414 10.88 10.882 10.414 11.458 10.414 C 12.034 10.414 12.5 10.882 12.5 11.458 Z M 16.667 11.458 C 16.667 12.034 16.199 12.5 15.623 12.5 C 15.047 12.5 14.581 12.032 14.581 11.456 C 14.582 10.88 15.049 10.414 15.625 10.414 C 16.201 10.414 16.668 10.882 16.667 11.458 Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/components/icons/CartIcon.tsx">
import React from 'react';
import { IconProps } from './BrowserIcon';

export const CartIcon: React.FC<IconProps> = ({ 
  size = 24, 
  color = 'currentColor', 
  className = '' 
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 50 50"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M 41.319 32.289 L 18.402 32.289 C 17.973 32.289 17.588 32.026 17.431 31.627 L 8.777 9.372 L 4.166 9.372 L 4.166 11.455 C 4.135 12.008 3.678 12.441 3.123 12.441 C 2.569 12.441 2.112 12.008 2.081 11.455 L 2.081 8.33 C 2.081 7.756 2.55 7.288 3.123 7.288 L 9.492 7.288 C 9.921 7.289 10.305 7.551 10.463 7.95 L 19.114 30.205 L 40.6 30.205 L 45.433 17.516 L 16.525 13.528 C 16.141 13.496 15.806 13.255 15.654 12.901 C 15.503 12.547 15.558 12.138 15.799 11.837 C 16.041 11.537 16.428 11.394 16.806 11.466 L 47.014 15.633 C 47.328 15.675 47.605 15.86 47.766 16.133 C 47.929 16.405 47.957 16.738 47.842 17.034 L 42.286 31.617 C 42.135 32.022 41.748 32.289 41.316 32.288 Z M 23.842 35.531 C 25.248 35.531 26.387 36.673 26.387 38.077 C 26.42 39.007 25.942 39.881 25.141 40.356 C 24.34 40.831 23.344 40.831 22.543 40.356 C 21.742 39.881 21.264 39.007 21.297 38.077 C 21.299 36.672 22.438 35.534 23.842 35.531 Z M 23.842 33.448 C 21.284 33.448 19.209 35.523 19.209 38.081 C 19.209 40.64 21.284 42.714 23.842 42.714 C 26.354 42.649 28.356 40.594 28.356 38.081 C 28.356 35.569 26.354 33.514 23.842 33.448 Z M 35.881 35.531 C 37.287 35.531 38.427 36.673 38.427 38.077 C 38.427 39.483 37.286 40.623 35.88 40.623 C 34.473 40.623 33.333 39.483 33.333 38.077 C 33.333 37.401 33.602 36.753 34.08 36.276 C 34.558 35.799 35.206 35.531 35.881 35.531 Z M 35.881 33.448 C 33.325 33.45 31.253 35.522 31.25 38.078 C 31.251 40.636 33.323 42.711 35.881 42.714 C 38.439 42.71 40.51 40.636 40.511 38.078 C 40.506 35.523 38.436 33.454 35.881 33.448 Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/components/icons/CheckIcon.tsx">
import React from 'react';
import { IconProps } from './BrowserIcon';

export const CheckIcon: React.FC<IconProps> = ({ 
  size = 24, 
  color = 'currentColor', 
  className = '' 
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M 12 2.25 C 6.615 2.25 2.25 6.615 2.25 12 C 2.25 17.385 6.615 21.75 12 21.75 C 17.385 21.75 21.75 17.385 21.75 12 C 21.74 6.62 17.38 2.26 12 2.25 Z M 16.641 10.294 L 11.147 15.544 C 11.005 15.677 10.817 15.751 10.622 15.75 C 10.429 15.753 10.244 15.679 10.106 15.544 L 7.359 12.919 C 7.152 12.738 7.06 12.458 7.121 12.189 C 7.181 11.92 7.384 11.706 7.649 11.632 C 7.914 11.557 8.199 11.634 8.391 11.831 L 10.622 13.959 L 15.609 9.206 C 15.912 8.942 16.37 8.964 16.647 9.255 C 16.923 9.547 16.921 10.005 16.641 10.294 Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/components/icons/FlagIcon.tsx">
import React from 'react';
import { IconProps } from './BrowserIcon';

export const FlagIcon: React.FC<IconProps> = ({ 
  size = 24, 
  color = 'currentColor', 
  className = '' 
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 27 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M 0 3.75 L 0 6 C 0 6.83 0.67 7.5 1.5 7.5 L 4.5 7.5 L 4.5 3.75 C 4.5 2.508 3.492 1.5 2.25 1.5 C 1.008 1.5 0 2.508 0 3.75 Z M 5.25 1.5 C 5.719 2.128 6 2.906 6 3.75 L 6 18 C 6 19.655 7.345 21 9 21 C 10.655 21 12 19.655 12 18 L 12 17.752 C 12 16.233 13.233 15 14.752 15 L 22.5 15 L 22.5 6 C 22.5 3.516 20.484 1.5 18 1.5 Z M 21.75 22.5 C 24.652 22.5 27 20.152 27 17.25 C 27 16.837 26.662 16.5 26.25 16.5 L 14.752 16.5 C 14.063 16.5 13.5 17.058 13.5 17.752 L 13.5 18 C 13.5 20.484 11.484 22.5 9 22.5 Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/components/icons/IconDemo.tsx">
import React from 'react';
import { Icons } from './index';
import type { IconName } from '../../types/icons';

interface IconDemoProps {
  className?: string;
}

export const IconDemo: React.FC<IconDemoProps> = ({ className = '' }) => {
  const iconNames: IconName[] = [
    'Browser',
    'Check', 
    'Loading',
    'Flag',
    'Megaphone',
    'Window',
    'Question',
    'Cart'
  ];

  return (
    <div className={`icon-demo ${className}`}>
      <h3>Available Icons</h3>
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', 
        gap: '1rem',
        padding: '1rem'
      }}>
        {iconNames.map((iconName) => {
          const IconComponent = Icons[iconName];
          return (
            <div 
              key={iconName}
              style={{
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                padding: '1rem',
                border: '1px solid #e0e0e0',
                borderRadius: '8px',
                gap: '0.5rem'
              }}
            >
              <IconComponent size={32} color="var(--color-primary, #31afb4)" />
              <span style={{ fontSize: '0.875rem', textAlign: 'center' }}>
                {iconName}
              </span>
            </div>
          );
        })}
      </div>
      
      <div style={{ marginTop: '2rem' }}>
        <h4>Usage Examples</h4>
        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>
          <Icons.Check size={16} color="green" />
          <Icons.Loading size={24} color="blue" />
          <Icons.Browser size={32} color="purple" />
          <Icons.Flag size={20} color="red" />
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/icons/LoadingIcon.tsx">
import React from 'react';
import { IconProps } from './BrowserIcon';

export const LoadingIcon: React.FC<IconProps> = ({ 
  size = 24, 
  color = 'currentColor', 
  className = '' 
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M 6.169 5.109 C 6.461 5.402 6.461 5.876 6.169 6.169 C 5.144 7.19 4.406 8.465 4.031 9.862 C 3.943 10.19 3.649 10.42 3.309 10.425 L 3.112 10.397 C 2.92 10.346 2.755 10.221 2.654 10.048 C 2.554 9.876 2.527 9.671 2.578 9.478 C 3.02 7.823 3.894 6.316 5.109 5.109 C 5.249 4.967 5.44 4.886 5.639 4.886 C 5.838 4.886 6.029 4.967 6.169 5.109 Z M 4.031 14.138 C 3.925 13.736 3.514 13.497 3.112 13.603 C 2.711 13.709 2.472 14.121 2.578 14.522 C 3.025 16.177 3.898 17.686 5.109 18.9 C 5.249 19.038 5.438 19.115 5.634 19.116 C 5.936 19.11 6.205 18.927 6.321 18.648 C 6.437 18.37 6.377 18.049 6.169 17.831 C 5.143 16.81 4.406 15.536 4.031 14.138 Z M 14.138 19.969 C 12.737 20.344 11.263 20.344 9.863 19.969 C 9.461 19.863 9.05 20.102 8.944 20.503 C 8.838 20.904 9.077 21.316 9.478 21.422 C 10.304 21.639 11.155 21.749 12.009 21.75 C 12.857 21.749 13.702 21.639 14.522 21.422 C 14.923 21.316 15.162 20.904 15.056 20.503 C 14.95 20.102 14.539 19.863 14.138 19.969 Z M 20.887 13.603 C 20.695 13.552 20.49 13.579 20.317 13.679 C 20.145 13.78 20.019 13.945 19.969 14.137 C 19.594 15.535 18.856 16.81 17.831 17.831 C 17.623 18.049 17.563 18.37 17.679 18.648 C 17.795 18.927 18.064 19.11 18.366 19.116 C 18.564 19.116 18.754 19.035 18.891 18.891 C 20.106 17.684 20.98 16.176 21.422 14.522 C 21.473 14.329 21.446 14.124 21.346 13.952 C 21.245 13.779 21.08 13.654 20.887 13.603 Z M 19.969 9.862 C 20.057 10.19 20.351 10.42 20.691 10.425 L 20.887 10.397 C 21.08 10.346 21.245 10.221 21.346 10.048 C 21.446 9.876 21.473 9.671 21.422 9.478 C 20.975 7.823 20.102 6.314 18.891 5.1 C 18.75 4.959 18.558 4.88 18.359 4.882 C 18.16 4.883 17.969 4.966 17.831 5.109 C 17.539 5.402 17.539 5.876 17.831 6.169 C 18.857 7.19 19.594 8.464 19.969 9.862 Z M 9.863 4.031 C 11.263 3.656 12.737 3.656 14.138 4.031 C 14.201 4.05 14.268 4.059 14.334 4.059 C 14.721 4.071 15.052 3.787 15.101 3.404 C 15.149 3.021 14.899 2.663 14.522 2.578 C 12.869 2.137 11.131 2.137 9.478 2.578 C 9.077 2.684 8.838 3.096 8.944 3.497 C 9.05 3.898 9.461 4.137 9.863 4.031 Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/components/icons/MegaphoneIcon.tsx">
import React from 'react';
import { IconProps } from './BrowserIcon';

export const MegaphoneIcon: React.FC<IconProps> = ({ 
  size = 24, 
  color = 'currentColor', 
  className = '' 
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 15 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M 5.25 7.519 C 5.25 5.855 6.6 4.5 8.269 4.5 C 8.592 4.5 8.916 4.552 9.225 4.655 L 13.031 5.925 C 13.819 6.187 14.667 5.761 14.93 4.978 C 15.192 4.195 14.766 3.342 13.983 3.08 L 10.172 1.809 C 9.558 1.603 8.916 1.5 8.269 1.5 C 4.945 1.5 2.25 4.195 2.25 7.519 L 2.25 10.5 L 1.5 10.5 C 0.67 10.5 0 11.17 0 12 C 0 12.83 0.67 13.5 1.5 13.5 L 2.25 13.5 L 2.25 15.586 C 2.25 16.402 2.03 17.203 1.608 17.902 L 0.216 20.227 C -0.061 20.691 -0.07 21.267 0.197 21.736 C 0.464 22.205 0.961 22.5 1.5 22.5 L 13.5 22.5 C 14.33 22.5 15 21.83 15 21 C 15 20.17 14.33 19.5 13.5 19.5 L 4.148 19.5 L 4.181 19.448 C 4.88 18.281 5.25 16.945 5.25 15.586 L 5.25 13.5 L 10.5 13.5 C 11.33 13.5 12 12.83 12 12 C 12 11.17 11.33 10.5 10.5 10.5 L 5.25 10.5 Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/components/icons/QuestionIcon.tsx">
import React from 'react';
import { IconProps } from './BrowserIcon';

export const QuestionIcon: React.FC<IconProps> = ({ 
  size = 24, 
  color = 'currentColor', 
  className = '' 
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 15 15"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M 14.766 7.5 C 14.766 11.514 11.514 14.766 7.5 14.766 C 3.486 14.766 0.234 11.514 0.234 7.5 C 0.234 3.489 3.486 0.234 7.5 0.234 C 11.514 0.234 14.766 3.489 14.766 7.5 Z M 7.696 2.637 C 6.1 2.637 5.08 3.311 4.283 4.506 C 4.181 4.661 4.213 4.869 4.362 4.983 L 5.379 5.754 C 5.531 5.868 5.748 5.842 5.868 5.692 C 6.393 5.027 6.75 4.644 7.547 4.644 C 8.145 4.644 8.886 5.027 8.886 5.61 C 8.886 6.05 8.522 6.275 7.934 6.606 C 7.239 6.987 6.328 7.468 6.328 8.672 L 6.328 8.789 C 6.328 8.982 6.486 9.141 6.68 9.141 L 8.32 9.141 C 8.514 9.141 8.672 8.982 8.672 8.789 L 8.672 8.751 C 8.672 7.916 11.109 7.884 11.109 5.625 C 11.109 3.926 9.346 2.637 7.696 2.637 Z M 7.5 9.902 C 6.756 9.902 6.152 10.506 6.152 11.25 C 6.152 11.994 6.756 12.598 7.5 12.598 C 8.244 12.598 8.848 11.994 8.848 11.25 C 8.848 10.506 8.244 9.902 7.5 9.902 Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/components/icons/README.md">
# Icon Components

This directory contains SVG icon components extracted from the original Framer design. All icons are optimized React components with TypeScript support.

## Available Icons

- **BrowserIcon** - Browser window with navigation dots
- **CheckIcon** - Checkmark in a circle
- **LoadingIcon** - Loading spinner/progress indicator
- **FlagIcon** - Flag shape
- **MegaphoneIcon** - Megaphone/announcement icon
- **WindowIcon** - Layered window interface
- **QuestionIcon** - Question mark in a circle
- **CartIcon** - Shopping cart with items

## Usage

### Individual Import
```tsx
import { BrowserIcon, CheckIcon } from '@/components/icons';

function MyComponent() {
  return (
    <div>
      <BrowserIcon size={24} color="#31afb4" />
      <CheckIcon size={16} color="green" className="my-icon" />
    </div>
  );
}
```

### Collection Import
```tsx
import { Icons } from '@/components/icons';

function MyComponent() {
  return (
    <div>
      <Icons.Browser size={32} />
      <Icons.Check color="currentColor" />
    </div>
  );
}
```

## Props

All icon components accept the following props:

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `size` | `number \| string` | `24` | Width and height of the icon |
| `color` | `string` | `'currentColor'` | Fill color of the icon |
| `className` | `string` | `''` | Additional CSS classes |

## Features

- **TypeScript Support**: Full type definitions included
- **Tree Shaking**: Optimized for bundle splitting
- **Accessibility**: Proper SVG structure with semantic markup
- **Customizable**: Size, color, and styling props
- **Performance**: Optimized SVG paths from original Framer assets
- **Consistent API**: All icons follow the same interface

## Design Tokens

Icons are designed to work with the project's design tokens:

```css
/* Use with design tokens */
<BrowserIcon color="var(--color-primary)" />
<CheckIcon color="var(--color-success)" />
```

## Examples

### Different Sizes
```tsx
<BrowserIcon size={16} />  {/* Small */}
<BrowserIcon size={24} />  {/* Default */}
<BrowserIcon size={32} />  {/* Large */}
<BrowserIcon size="2rem" /> {/* CSS units */}
```

### Different Colors
```tsx
<CheckIcon color="#31afb4" />           {/* Hex */}
<CheckIcon color="rgb(49, 175, 180)" /> {/* RGB */}
<CheckIcon color="currentColor" />      {/* Inherit */}
<CheckIcon color="var(--color-primary)" /> {/* CSS Custom Property */}
```

### With CSS Classes
```tsx
<LoadingIcon 
  className="animate-spin text-blue-500" 
  size={24} 
/>
```
</file>

<file path="src/components/icons/WindowIcon.tsx">
import React from 'react';
import { IconProps } from './BrowserIcon';

export const WindowIcon: React.FC<IconProps> = ({ 
  size = 24, 
  color = 'currentColor', 
  className = '' 
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 50 50"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M 40.625 46.875 L 1.042 46.875 C 0.467 46.874 0.001 46.408 0 45.833 L 0 12.5 C 0 11.927 0.467 11.458 1.042 11.458 L 40.625 11.458 C 41.198 11.458 41.667 11.927 41.667 12.5 L 41.667 45.833 C 41.667 46.406 41.198 46.875 40.625 46.875 Z M 2.083 44.792 L 39.583 44.792 L 39.583 13.542 L 2.083 13.542 Z M 44.792 42.708 L 41.667 42.708 C 41.094 42.708 40.625 42.239 40.625 41.666 C 40.625 41.092 41.094 40.623 41.667 40.623 L 43.75 40.623 L 43.75 9.373 L 6.25 9.373 L 6.25 11.456 C 6.22 12.01 5.762 12.443 5.208 12.443 C 4.654 12.443 4.196 12.01 4.166 11.456 L 4.166 8.331 C 4.166 7.758 4.633 7.289 5.208 7.289 L 44.791 7.289 C 45.364 7.289 45.833 7.758 45.833 8.331 L 45.833 41.664 C 45.833 42.238 45.364 42.706 44.791 42.706 Z M 48.958 38.542 L 45.833 38.542 C 45.259 38.542 44.791 38.073 44.791 37.5 C 44.791 36.927 45.259 36.458 45.833 36.458 L 47.916 36.458 L 47.916 5.208 L 10.416 5.208 L 10.416 7.291 C 10.385 7.844 9.928 8.277 9.373 8.277 C 8.819 8.277 8.362 7.844 8.331 7.291 L 8.331 4.166 C 8.331 3.592 8.798 3.123 9.373 3.123 L 48.956 3.123 C 49.53 3.123 49.998 3.592 49.998 4.166 L 49.998 37.498 C 49.998 38.072 49.53 38.541 48.956 38.541 Z M 39.583 21.875 L 2.083 21.875 C 1.529 21.845 1.096 21.387 1.096 20.833 C 1.096 20.279 1.529 19.821 2.083 19.791 L 39.583 19.791 C 40.156 19.791 40.625 20.259 40.625 20.833 C 40.625 21.406 40.156 21.875 39.583 21.875 Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/lib/animations/index.ts">
// Animation system exports for easy importing

export {
  slideInLeft,
  slideInRight,
  slideInUp,
  scaleAndSlide,
  staggerContainer,
  staggerItem,
  hoverScale,
  fadeIn,
  blurElement,
  animationPresets,
  springConfig,
  quickSpring,
  getAnimationProps,
  viewportConfig
} from './variants';

export {
  transitions,
  staggerConfig,
  delays
} from './transitions';

// Re-export default variants for convenience
export { default as variants } from './variants';
export { default as transitionConfig } from './transitions';
</file>

<file path="src/lib/data/pricing.ts">
import { PricingPlan } from '@/types/data';

export const pricingPlans: PricingPlan[] = [
  {
    id: 'starter',
    name: 'Starter',
    price: 2500,
    period: 'project',
    description: 'Perfect for small businesses and startups looking to establish their digital presence.',
    features: [
      'Custom website design (up to 5 pages)',
      'Responsive mobile optimization',
      'Basic SEO setup',
      'Contact form integration',
      'Social media integration',
      '30 days of support',
      'Google Analytics setup'
    ],
    ctaText: 'Get Started',
    ctaLink: '/contact?plan=starter'
  },
  {
    id: 'professional',
    name: 'Professional',
    price: 5500,
    period: 'project',
    description: 'Comprehensive solution for growing businesses that need advanced functionality and features.',
    features: [
      'Custom website design (up to 15 pages)',
      'Advanced animations and interactions',
      'Content Management System',
      'E-commerce functionality (up to 50 products)',
      'Advanced SEO optimization',
      'Performance optimization',
      '90 days of support',
      'Training and documentation',
      'Email marketing integration'
    ],
    popular: true,
    ctaText: 'Choose Professional',
    ctaLink: '/contact?plan=professional'
  },
  {
    id: 'enterprise',
    name: 'Enterprise',
    price: 12000,
    period: 'project',
    description: 'Full-scale digital solutions for large organizations with complex requirements.',
    features: [
      'Unlimited pages and custom functionality',
      'Advanced web application development',
      'Custom API development and integrations',
      'Multi-language support',
      'Advanced security implementation',
      'Performance monitoring and analytics',
      'Dedicated project manager',
      '6 months of support and maintenance',
      'Staff training and workshops',
      'Priority support and updates'
    ],
    ctaText: 'Contact Sales',
    ctaLink: '/contact?plan=enterprise'
  },
  {
    id: 'retainer',
    name: 'Monthly Retainer',
    price: 3500,
    period: 'month',
    description: 'Ongoing partnership for continuous development, maintenance, and optimization.',
    features: [
      '40 hours of development time per month',
      'Priority support and bug fixes',
      'Regular performance optimization',
      'Content updates and maintenance',
      'Monthly analytics reports',
      'Strategic consultation calls',
      'Feature enhancements and improvements',
      'Security updates and monitoring'
    ],
    ctaText: 'Start Partnership',
    ctaLink: '/contact?plan=retainer'
  }
];
</file>

<file path="src/lib/data/services.ts">
import { Service } from '@/types/data';

export const services: Service[] = [
  {
    id: '1',
    title: 'Web Development',
    description: 'Custom web applications built with modern technologies and best practices for optimal performance and user experience.',
    features: [
      'Responsive design across all devices',
      'Performance optimization and SEO',
      'Modern frameworks (React, Next.js, Vue)',
      'Progressive Web App capabilities',
      'API integration and backend development',
      'Content Management Systems'
    ],
    duration: '4-12 weeks',
    icon: 'BrowserIcon'
  },
  {
    id: '2',
    title: 'Mobile Development',
    description: 'Native and cross-platform mobile applications that deliver exceptional user experiences on iOS and Android.',
    features: [
      'Native iOS and Android development',
      'Cross-platform solutions (React Native, Flutter)',
      'App Store optimization and deployment',
      'Push notifications and real-time features',
      'Offline functionality and data sync',
      'Integration with device features'
    ],
    duration: '6-16 weeks',
    icon: 'MobileIcon'
  },
  {
    id: '3',
    title: 'UI/UX Design',
    description: 'User-centered design solutions that combine beautiful aesthetics with intuitive functionality and accessibility.',
    features: [
      'User research and persona development',
      'Wireframing and prototyping',
      'Visual design and brand integration',
      'Usability testing and iteration',
      'Design system creation',
      'Accessibility compliance (WCAG)'
    ],
    duration: '3-8 weeks',
    icon: 'DesignIcon'
  },
  {
    id: '4',
    title: 'Brand Strategy',
    description: 'Comprehensive brand development that establishes strong market presence and emotional connections with your audience.',
    features: [
      'Brand positioning and messaging',
      'Logo and visual identity design',
      'Brand guidelines and style guides',
      'Marketing collateral design',
      'Digital brand implementation',
      'Brand audit and competitive analysis'
    ],
    duration: '2-6 weeks',
    icon: 'BrandIcon'
  },
  {
    id: '5',
    title: 'E-commerce Solutions',
    description: 'Complete e-commerce platforms that drive sales with optimized user journeys and powerful backend management.',
    features: [
      'Custom e-commerce development',
      'Payment gateway integration',
      'Inventory management systems',
      'Order processing and fulfillment',
      'Analytics and reporting dashboards',
      'Multi-channel selling capabilities'
    ],
    duration: '6-20 weeks',
    icon: 'ShoppingIcon'
  },
  {
    id: '6',
    title: 'Digital Consulting',
    description: 'Strategic guidance to help businesses navigate digital transformation and optimize their online presence.',
    features: [
      'Digital strategy development',
      'Technology stack recommendations',
      'Performance audits and optimization',
      'SEO and digital marketing strategy',
      'Conversion rate optimization',
      'Analytics setup and interpretation'
    ],
    duration: '2-4 weeks',
    icon: 'ConsultingIcon'
  }
];
</file>

<file path="src/lib/data/team-members.ts">
import { TeamMember } from '@/types/data';

export const teamMembers: TeamMember[] = [
  {
    id: '1',
    name: 'Sarah Chen',
    title: 'Creative Director',
    quote: 'Design is not just what it looks like and feels like. Design is how it works.',
    image: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=400&fit=crop&auto=format',
    socialLinks: {
      linkedin: 'https://linkedin.com/in/sarahchen',
      twitter: 'https://twitter.com/sarahchen',
      portfolio: 'https://sarahchen.design'
    }
  },
  {
    id: '2',
    name: 'Marcus Rodriguez',
    title: 'Lead Developer',
    quote: 'Code is poetry written in logic. Every line should tell a story.',
    image: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&auto=format',
    socialLinks: {
      linkedin: 'https://linkedin.com/in/marcusrodriguez',
      twitter: 'https://twitter.com/marcusdev',
      portfolio: 'https://marcus.dev'
    }
  },
  {
    id: '3',
    name: 'Emily Watson',
    title: 'UX Strategist',
    quote: 'Great design is invisible. It just works, and users love it without knowing why.',
    image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&auto=format',
    socialLinks: {
      linkedin: 'https://linkedin.com/in/emilywatson',
      twitter: 'https://twitter.com/emilyux',
      portfolio: 'https://emilywatson.com'
    }
  },
  {
    id: '4',
    name: 'David Kim',
    title: 'Brand Strategist',
    quote: 'A brand is a voice and a product is a souvenir. We create voices that resonate.',
    image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&auto=format',
    socialLinks: {
      linkedin: 'https://linkedin.com/in/davidkim',
      twitter: 'https://twitter.com/davidbrand',
      email: 'david@agentic.design'
    }
  }
];
</file>

<file path="src/lib/utils/cn.ts">
import { clsx, type ClassValue } from 'clsx';

export function cn(...inputs: ClassValue[]) {
  return clsx(inputs);
}
</file>

<file path="src/styles/components/Footer.module.css">
/* src/styles/components/Footer.module.css */

.footer {
  background: var(--color-background-darker);
  border-top: 1px solid rgba(49, 175, 180, 0.2);
  padding: var(--space-4xl) 0 var(--space-xl) 0;
  position: relative;
}

.footer::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(49, 175, 180, 0.5), transparent);
}

.footerContent {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr 1fr;
  gap: var(--space-3xl);
  margin-bottom: var(--space-3xl);
}

.brandSection {
  max-width: 300px;
}

.logo {
  display: inline-block;
  text-decoration: none;
  margin-bottom: var(--space-lg);
}

.logoText {
  font-family: var(--font-headline);
  font-size: var(--font-size-2xl);
  font-weight: var(--font-weight-bold);
  color: var(--color-text-primary);
  transition: color 0.3s ease;
}

.logo:hover .logoText {
  color: var(--color-primary);
}

.brandDescription {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  color: var(--color-text-muted);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--space-lg);
}

.socialLinks {
  display: flex;
  gap: var(--space-md);
}

.socialLink {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  background: rgba(49, 175, 180, 0.1);
  border: 1px solid rgba(49, 175, 180, 0.2);
  border-radius: 50%;
  color: var(--color-primary);
  text-decoration: none;
  transition: all 0.3s ease;
}

.socialLink:hover {
  background: var(--color-primary);
  border-color: var(--color-primary);
  color: var(--color-background-darker);
  transform: translateY(-2px);
}

.sectionTitle {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-bold);
  color: var(--color-text-primary);
  margin-bottom: var(--space-lg);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.linksList {
  display: flex;
  flex-direction: column;
  gap: var(--space-sm);
}

.footerLink {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  color: var(--color-text-muted);
  text-decoration: none;
  transition: color 0.3s ease;
  padding: var(--space-xs) 0;
}

.footerLink:hover {
  color: var(--color-primary);
}

.servicesList {
  display: flex;
  flex-direction: column;
  gap: var(--space-sm);
}

.serviceItem {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  color: var(--color-text-muted);
  padding: var(--space-xs) 0;
}

.contactInfo {
  display: flex;
  flex-direction: column;
  gap: var(--space-sm);
}

.contactItem {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  color: var(--color-text-muted);
  margin: 0;
  padding: var(--space-xs) 0;
}

.bottomBar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: var(--space-xl);
  border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.copyright,
.madeWith {
  font-family: var(--font-body);
  font-size: var(--font-size-sm);
  color: var(--color-text-muted);
  margin: 0;
}

.madeWith {
  display: flex;
  align-items: center;
  gap: var(--space-xs);
}

/* Responsive Design */
@media (max-width: 1199px) {
  .footer {
    padding: var(--space-3xl) 0 var(--space-lg) 0;
  }
  
  .footerContent {
    grid-template-columns: 1.5fr 1fr 1fr 1fr;
    gap: var(--space-2xl);
    margin-bottom: var(--space-2xl);
  }
}

@media (max-width: 809px) {
  .footer {
    padding: var(--space-2xl) 0 var(--space-lg) 0;
  }
  
  .footerContent {
    grid-template-columns: 1fr 1fr;
    gap: var(--space-xl);
    margin-bottom: var(--space-xl);
  }
  
  .brandSection {
    grid-column: 1 / -1;
    max-width: none;
    text-align: center;
    margin-bottom: var(--space-lg);
  }
  
  .socialLinks {
    justify-content: center;
  }
  
  .bottomBar {
    flex-direction: column;
    gap: var(--space-sm);
    text-align: center;
  }
}

@media (max-width: 390px) {
  .footer {
    padding: var(--space-xl) 0 var(--space-md) 0;
  }
  
  .footerContent {
    grid-template-columns: 1fr;
    gap: var(--space-lg);
    margin-bottom: var(--space-lg);
  }
  
  .brandSection {
    margin-bottom: 0;
  }
  
  .socialLink {
    width: 36px;
    height: 36px;
  }
  
  .socialLinks {
    gap: var(--space-sm);
  }
  
  .sectionTitle {
    font-size: var(--font-size-sm);
  }
  
  .footerLink,
  .serviceItem,
  .contactItem {
    font-size: var(--font-size-sm);
  }
}
</file>

<file path="src/styles/components/TeamMember.module.css">
/* src/styles/components/TeamMember.module.css */

.teamMember {
  width: 100%;
  max-width: 400px;
  margin: 0 auto;
}

.memberCard {
  background: rgb(255, 255, 255);
  border: 1px solid rgba(49, 175, 180, 0.3);
  border-radius: var(--radius-xl);
  overflow: hidden;
  transition: all 0.3s ease;
  will-change: transform;
  box-shadow: 0 4px 24px rgba(0, 0, 0, 0.08);
}

.memberCard:hover {
  border-color: var(--color-primary);
  box-shadow: 0 12px 40px rgba(49, 175, 180, 0.3);
  transform: translateY(-8px);
}

.imageContainer {
  position: relative;
  width: 100%;
  aspect-ratio: 1;
  overflow: hidden;
  background: linear-gradient(135deg, var(--color-primary), rgba(49, 175, 180, 0.8));
}

.imageWrapper {
  position: relative;
  width: 100%;
  height: 100%;
}

.memberImage {
  object-fit: cover;
  object-position: center;
  transition: transform 0.3s ease;
}

.socialOverlay {
  position: absolute;
  inset: 0;
  background: linear-gradient(
    to bottom,
    transparent 0%,
    transparent 60%,
    rgba(0, 0, 0, 0.7) 100%
  );
  display: flex;
  align-items: flex-end;
  justify-content: center;
  padding: var(--space-lg);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.memberCard:hover .socialOverlay {
  opacity: 1;
}

.socialLinks {
  display: flex;
  gap: var(--space-md);
}

.socialLink {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  color: var(--color-text-primary);
  text-decoration: none;
  transition: all 0.2s ease;
}

.socialLink:hover {
  background: var(--color-primary);
  border-color: var(--color-primary);
  color: var(--color-background-darker);
}

.memberInfo {
  padding: var(--space-xl);
  text-align: center;
}

.memberName {
  font-family: var(--font-headline);
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  color: var(--color-text-primary-dark);
  margin-bottom: var(--space-sm);
  line-height: var(--line-height-tight);
}

.memberTitle {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-medium);
  color: var(--color-primary);
  margin-bottom: var(--space-lg);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.memberQuote {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  font-style: italic;
  color: var(--color-text-muted-dark);
  line-height: var(--line-height-relaxed);
  margin: 0;
  position: relative;
}

.memberQuote::before {
  content: '"';
  font-size: var(--font-size-3xl);
  color: var(--color-primary);
  position: absolute;
  top: -10px;
  left: -10px;
  font-family: serif;
  opacity: 0.3;
}

/* Responsive Design */
@media (max-width: 809px) {
  .teamMember {
    max-width: 350px;
  }
  
  .memberInfo {
    padding: var(--space-lg);
  }
  
  .memberName {
    font-size: var(--font-size-lg);
  }
  
  .memberTitle {
    font-size: var(--font-size-sm);
  }
  
  .memberQuote {
    font-size: var(--font-size-sm);
  }
  
  .socialLink {
    width: 36px;
    height: 36px;
  }
  
  .socialLinks {
    gap: var(--space-sm);
  }
}

@media (max-width: 390px) {
  .teamMember {
    max-width: 100%;
  }
  
  .memberInfo {
    padding: var(--space-md);
  }
  
  .memberName {
    font-size: var(--font-size-base);
  }
  
  .memberQuote {
    font-size: var(--font-size-xs);
  }
  
  .socialOverlay {
    padding: var(--space-md);
  }
  
  .socialLink {
    width: 32px;
    height: 32px;
  }
}
</file>

<file path="src/styles/components/TeamSection.module.css">
/* src/styles/components/TeamSection.module.css */

.teamSection {
  padding: var(--space-5xl) 0;
  background: var(--color-background-light);
  position: relative;
}

.teamSection::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(49, 175, 180, 0.3), transparent);
}

.sectionHeader {
  text-align: center;
  margin-bottom: var(--space-4xl);
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.sectionTitle {
  font-family: var(--font-headline);
  font-size: clamp(2rem, 4vw, 3rem);
  font-weight: var(--font-weight-bold);
  color: var(--color-text-primary-dark);
  margin-bottom: var(--space-lg);
  line-height: var(--line-height-tight);
}

.sectionDescription {
  font-family: var(--font-body);
  font-size: var(--font-size-lg);
  color: var(--color-text-muted-dark);
  line-height: var(--line-height-relaxed);
  margin: 0;
}

.teamGrid {
  display: flex;
  justify-content: center;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 var(--space-lg);
}

/* Responsive Design */
@media (max-width: 1199px) {
  .teamSection {
    padding: var(--space-4xl) 0;
  }
  
  .sectionHeader {
    margin-bottom: var(--space-3xl);
  }
  
  .teamGrid {
    padding: 0 var(--space-md);
  }
}

@media (max-width: 809px) {
  .teamSection {
    padding: var(--space-3xl) 0;
  }
  
  .sectionHeader {
    margin-bottom: var(--space-2xl);
  }
  
  .sectionTitle {
    font-size: clamp(1.75rem, 3.5vw, 2.5rem);
  }
  
  .sectionDescription {
    font-size: var(--font-size-base);
  }
  
  .teamGrid {
    padding: 0 var(--space-sm);
  }
}

@media (max-width: 390px) {
  .teamSection {
    padding: var(--space-2xl) 0;
  }
  
  .sectionHeader {
    margin-bottom: var(--space-xl);
  }
  
  .teamGrid {
    padding: 0 var(--space-xs);
  }
}
</file>

<file path="src/types/data.ts">
// Data model interfaces for the Agentic design agency template

export interface WorkProject {
  id: string;
  title: string;
  category: string;
  client: string;
  duration: string;
  image: string;
  thumbnail?: string;
  description?: string;
  link?: string;
  tags: string[];
}

export interface TeamMember {
  id: string;
  name: string;
  title: string;
  quote: string;
  image: string;
  socialLinks: {
    linkedin?: string;
    twitter?: string;
    portfolio?: string;
    email?: string;
  };
}

export interface Service {
  id: string;
  title: string;
  description: string;
  features: string[];
  duration?: string;
  icon: string; // Icon component name
}

export interface PricingPlan {
  id: string;
  name: string;
  price: number;
  period: 'month' | 'year' | 'project';
  features: string[];
  popular?: boolean;
  ctaText: string;
  ctaLink: string;
  description?: string;
}
</file>

<file path="src/types/icons.ts">
import { IconProps } from '../components/icons/BrowserIcon';

// Re-export IconProps for external use
export type { IconProps };

// Icon component type definition
export type IconComponent = React.FC<IconProps>;

// Available icon names
export type IconName = 
  | 'Browser'
  | 'Check'
  | 'Loading'
  | 'Flag'
  | 'Megaphone'
  | 'Window'
  | 'Question'
  | 'Cart';

// Icon collection type
export type IconCollection = Record<IconName, IconComponent>;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/lib/*": ["./src/lib/*"],
      "@/styles/*": ["./src/styles/*"],
      "@/types/*": ["./src/types/*"],
      "@/public/*": ["./public/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="next.config.ts">
// next.config.ts
import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  images: {
    domains: ['framerusercontent.com', 'images.unsplash.com'],
    formats: ['image/webp', 'image/avif'],
  },
  experimental: {
    optimizePackageImports: ['framer-motion'],
  },
  // Enable compression
  compress: true,
  // Configure headers for better caching
  async headers() {
    return [
      {
        source: '/images/:path*',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
    ];
  },
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "creative-current-nextjs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "clsx": "^2.1.1",
    "framer-motion": "^12.23.12",
    "next": "^15.4.7",
    "react": "^19.1.1",
    "react-dom": "^19.1.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20.19.11",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.4.7",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="src/components/icons/BurgerIcon.tsx">
import React from 'react';
import { motion } from 'framer-motion';
import styles from '@/styles/components/BurgerIcon.module.css';

export interface BurgerIconProps {
  isOpen: boolean;
  onClick: () => void;
  variant?: 'dark' | 'light';
  size?: number;
  className?: string;
}

export const BurgerIcon: React.FC<BurgerIconProps> = ({
  isOpen,
  onClick,
  variant = 'dark',
  size = 24,
  className = ''
}) => {
  // Enhanced animation variants for smoother transitions
  const topLineVariants = {
    closed: {
      rotate: 0,
      y: 0,
    },
    open: {
      rotate: 45,
      y: 8,
    }
  };

  const middleLineVariants = {
    closed: {
      opacity: 1,
      x: 0,
    },
    open: {
      opacity: 0,
      x: -10,
    }
  };

  const bottomLineVariants = {
    closed: {
      rotate: 0,
      y: 0,
    },
    open: {
      rotate: -45,
      y: -8,
    }
  };

  const buttonVariants = {
    closed: {
      scale: 1,
      rotate: 0,
    },
    open: {
      scale: 1,
      rotate: 0,
    },
  };

  return (
    <motion.button
      className={`${styles.burgerButton} ${styles[variant]} ${className}`}
      onClick={onClick}
      aria-label={isOpen ? 'Close menu' : 'Open menu'}
      aria-expanded={isOpen}
      type="button"
      style={{ width: size, height: size }}
      variants={buttonVariants}
      animate={isOpen ? 'open' : 'closed'}
      whileHover={{
        scale: 1.1,
      }}
      whileTap={{
        scale: 0.95,
      }}
    >
      <div className={styles.burgerIcon}>
        <motion.span
          className={`${styles.line} ${styles.topLine}`}
          variants={topLineVariants}
          animate={isOpen ? 'open' : 'closed'}
          transition={{
            duration: 0.3,
            ease: 'easeOut',
            delay: isOpen ? 0.1 : 0,
          }}
        />
        <motion.span
          className={`${styles.line} ${styles.middleLine}`}
          variants={middleLineVariants}
          animate={isOpen ? 'open' : 'closed'}
          transition={{
            duration: 0.2,
            ease: isOpen ? 'easeIn' : 'easeOut',
            delay: isOpen ? 0 : 0.1,
          }}
        />
        <motion.span
          className={`${styles.line} ${styles.bottomLine}`}
          variants={bottomLineVariants}
          animate={isOpen ? 'open' : 'closed'}
          transition={{
            duration: 0.3,
            ease: 'easeOut',
            delay: isOpen ? 0.1 : 0,
          }}
        />
      </div>
    </motion.button>
  );
};
</file>

<file path="src/components/icons/index.ts">
// Icon component exports
export { BrowserIcon, type IconProps } from './BrowserIcon';
export { BurgerIcon, type BurgerIconProps } from './BurgerIcon';
export { CheckIcon } from './CheckIcon';
export { LoadingIcon } from './LoadingIcon';
export { FlagIcon } from './FlagIcon';
export { MegaphoneIcon } from './MegaphoneIcon';
export { WindowIcon } from './WindowIcon';
export { QuestionIcon } from './QuestionIcon';
export { CartIcon } from './CartIcon';

// Re-export all icons as a collection for convenience
import { BrowserIcon } from './BrowserIcon';
import { BurgerIcon } from './BurgerIcon';
import { CheckIcon } from './CheckIcon';
import { LoadingIcon } from './LoadingIcon';
import { FlagIcon } from './FlagIcon';
import { MegaphoneIcon } from './MegaphoneIcon';
import { WindowIcon } from './WindowIcon';
import { QuestionIcon } from './QuestionIcon';
import { CartIcon } from './CartIcon';

export const Icons = {
  Browser: BrowserIcon,
  Burger: BurgerIcon,
  Check: CheckIcon,
  Loading: LoadingIcon,
  Flag: FlagIcon,
  Megaphone: MegaphoneIcon,
  Window: WindowIcon,
  Question: QuestionIcon,
  Cart: CartIcon,
} as const;
</file>

<file path="src/components/sections/TeamSection.tsx">
// src/components/sections/TeamSection.tsx
'use client';

import { motion, Variants } from 'framer-motion';
import { TeamMember } from '@/components/ui/TeamMember';
import { teamMembers } from '@/lib/data/team-members';
import styles from '@/styles/components/TeamSection.module.css';

const sectionVariants: Variants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.2,
      delayChildren: 0.1
    }
  }
};

const titleVariants: Variants = {
  hidden: { opacity: 0, y: 30 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      type: "spring" as const,
      stiffness: 200,
      damping: 30
    }
  }
};

export const TeamSection = () => {
  // Show only the first team member for now
  const featuredMember = teamMembers[0];

  return (
    <motion.section 
      className={styles.teamSection}
      variants={sectionVariants}
      initial="hidden"
      whileInView="visible"
      viewport={{ once: true, margin: "-100px" }}
    >
      <div className="container">
        <motion.div 
          className={styles.sectionHeader}
          variants={titleVariants}
        >
          <h2 className={styles.sectionTitle}>Meet Our Team</h2>
          <p className={styles.sectionDescription}>
            Passionate creators dedicated to bringing your vision to life
          </p>
        </motion.div>

        <div className={styles.teamGrid}>
          <TeamMember 
            member={featuredMember}
            index={0}
          />
        </div>
      </div>
    </motion.section>
  );
};
</file>

<file path="src/lib/animations/transitions.ts">
// Transition configurations for consistent animation timing

export const transitions = {
  // Spring transitions matching Framer settings
  spring: {
    type: "spring" as const,
    stiffness: 200,
    damping: 30
  },
  
  quickSpring: {
    type: "spring" as const,
    stiffness: 450,
    damping: 90
  },
  
  gentleSpring: {
    type: "spring" as const,
    stiffness: 150,
    damping: 40
  },
  
  // Easing transitions
  easeOut: {
    duration: 0.6,
    ease: "easeOut"
  },
  
  easeInOut: {
    duration: 0.4,
    ease: "easeInOut"
  },
  
  // Quick transitions for hover states
  quick: {
    duration: 0.2,
    ease: "easeOut"
  },
  
  // Slow transitions for dramatic effects
  slow: {
    duration: 1.2,
    ease: "easeOut"
  }
};

// Stagger configurations
export const staggerConfig = {
  // Default stagger for work cards
  workCards: {
    staggerChildren: 0.1,
    delayChildren: 0.1
  },
  
  // Faster stagger for smaller elements
  fast: {
    staggerChildren: 0.05,
    delayChildren: 0.05
  },
  
  // Slower stagger for dramatic effect
  slow: {
    staggerChildren: 0.2,
    delayChildren: 0.3
  }
};

// Delay configurations
export const delays = {
  none: 0,
  short: 0.1,
  medium: 0.2,
  long: 0.4,
  heroTitle: 0.2,
  heroSubtitle: 0.4,
  heroBackground: 0.5
};

const transitionDefaults = {
  transitions,
  staggerConfig,
  delays
};

export default transitionDefaults;
</file>

<file path="src/styles/components/BurgerIcon.module.css">
/* BurgerIcon.module.css - Animated hamburger menu icon */

.burgerButton {
  background: transparent;
  border: none;
  cursor: pointer;
  padding: var(--space-xs);
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--radius-sm);
  transition: background-color var(--duration-normal) var(--ease-out);
  position: relative;
  z-index: 1001;
  outline: none;
  box-sizing: border-box;
}

.burgerButton:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.burgerButton:hover .line {
  transform: scale(1.05);
}

.burgerButton:focus {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

.burgerIcon {
  width: 24px;
  height: 18px;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.line {
  display: block;
  width: 100%;
  height: 2px;
  background-color: var(--color-text-muted);
  border-radius: 1px;
  transform-origin: center;
}

.topLine {
  transform-origin: center;
}

.middleLine {
  transform-origin: center;
}

.bottomLine {
  transform-origin: center;
}

/* Variant styles */
.burgerButton.dark .line {
  background-color: var(--color-text-muted);
}

.burgerButton.light .line {
  background-color: var(--color-background-darker);
}

.burgerButton.dark:hover .line {
  background-color: var(--color-primary);
}

.burgerButton.light:hover .line {
  background-color: var(--color-primary);
}

/* Enhanced animation support */
.burgerButton {
  /* Enable hardware acceleration for smooth animations */
  transform: translateZ(0);
  will-change: transform, background-color;
}

.burgerIcon {
  /* Enable hardware acceleration */
  transform: translateZ(0);
  will-change: transform;
}

.line {
  /* Enable hardware acceleration for line animations */
  will-change: transform, opacity, background-color;
  transform: translateZ(0);
}

/* Accessibility - Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .burgerButton,
  .line,
  .burgerIcon {
    transition: none !important;
    animation: none !important;
    will-change: auto;
  }
  
  /* Disable animations for specific elements */
  .burgerButton,
  .burgerButton *,
  .burgerIcon,
  .burgerIcon *,
  .line {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

/* Touch target optimization for mobile */
@media (max-width: 768px) {
  .burgerButton {
    padding: var(--space-sm);
    min-width: 44px;
    min-height: 44px;
  }
}
</file>

<file path="src/styles/components/ContactSection.module.css">
/* src/styles/components/ContactSection.module.css */

.contactSection {
  padding: var(--space-5xl) 0;
  background: var(--color-background-neutral);
  position: relative;
  width: 100%;
  max-width: 100vw;
  overflow-x: hidden;
  box-sizing: border-box;
}

.contactSection::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(49, 175, 180, 0.3), transparent);
}

.contactGrid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--space-4xl);
  align-items: start;
  max-width: 1200px;
  width: 100%;
  margin: 0 auto;
  padding: 0 var(--space-lg);
  box-sizing: border-box;
}

.contactInfo {
  padding-right: var(--space-xl);
}

.sectionTitle {
  font-family: var(--font-headline);
  font-size: clamp(2rem, 4vw, 3rem);
  font-weight: var(--font-weight-bold);
  color: var(--color-text-primary-dark);
  margin-bottom: var(--space-lg);
  line-height: var(--line-height-tight);
}

.sectionDescription {
  font-family: var(--font-body);
  font-size: var(--font-size-lg);
  color: var(--color-text-muted-dark);
  line-height: var(--line-height-relaxed);
  margin-bottom: var(--space-3xl);
}

.contactDetails {
  display: flex;
  flex-direction: column;
  gap: var(--space-xl);
}

.contactItem {
  display: flex;
  align-items: center;
  gap: var(--space-lg);
}

.contactIcon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 48px;
  height: 48px;
  background: rgba(49, 175, 180, 0.1);
  border: 1px solid rgba(49, 175, 180, 0.3);
  border-radius: 50%;
  color: var(--color-primary);
  flex-shrink: 0;
}

.contactText h4 {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-bold);
  color: var(--color-text-primary-dark);
  margin: 0 0 var(--space-xs) 0;
}

.contactText p {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  color: var(--color-text-muted-dark);
  margin: 0;
}

.contactForm {
  background: rgb(255, 255, 255);
  border: 1px solid rgba(49, 175, 180, 0.3);
  border-radius: var(--radius-xl);
  padding: var(--space-3xl);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.form {
  display: flex;
  flex-direction: column;
  gap: var(--space-lg);
}

.formGroup {
  display: flex;
  flex-direction: column;
}

.formInput,
.formTextarea {
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  padding: var(--space-md) var(--space-lg);
  background: rgb(248, 250, 252);
  border: 1px solid rgba(100, 116, 139, 0.2);
  border-radius: var(--radius-md);
  color: var(--color-text-primary-dark);
  transition: all 0.3s ease;
}

.formInput::placeholder,
.formTextarea::placeholder {
  color: var(--color-text-muted-dark);
}

.formInput:focus,
.formTextarea:focus {
  outline: none;
  border-color: var(--color-primary);
  background: rgb(255, 255, 255);
  box-shadow: 0 0 0 3px rgba(49, 175, 180, 0.1);
}

.formTextarea {
  resize: vertical;
  min-height: 120px;
}

.submitButton {
  background: var(--color-primary);
  border: none;
  border-radius: var(--radius-md);
  color: var(--color-background-darker);
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-bold);
  padding: var(--space-lg) var(--space-xl);
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.submitButton:hover {
  background: rgba(49, 175, 180, 0.9);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(49, 175, 180, 0.3);
}

/* Responsive Design */
@media (max-width: 1199px) {
  .contactSection {
    padding: var(--space-4xl) 0;
  }
  
  .contactGrid {
    gap: var(--space-3xl);
    padding: 0 var(--space-md);
  }
  
  .contactInfo {
    padding-right: var(--space-lg);
  }
  
  .contactForm {
    padding: var(--space-2xl);
  }
}

@media (max-width: 809px) {
  .contactSection {
    padding: var(--space-3xl) 0;
  }
  
  .contactGrid {
    grid-template-columns: 1fr;
    gap: var(--space-2xl);
    padding: 0 var(--space-sm);
  }
  
  .contactInfo {
    padding-right: 0;
    text-align: center;
  }
  
  .sectionTitle {
    font-size: clamp(1.75rem, 3.5vw, 2.5rem);
  }
  
  .sectionDescription {
    font-size: var(--font-size-base);
  }
  
  .contactDetails {
    gap: var(--space-lg);
  }
  
  .contactItem {
    justify-content: center;
    text-align: left;
  }
  
  .contactForm {
    padding: var(--space-xl);
  }
}

@media (max-width: 390px) {
  .contactSection {
    padding: var(--space-2xl) 0;
  }
  
  .contactGrid {
    gap: var(--space-xl);
    padding: 0 var(--space-sm);
    max-width: calc(100vw - 2 * var(--space-sm));
  }
  
  .contactForm {
    padding: var(--space-lg);
    max-width: 100%;
    box-sizing: border-box;
  }
  
  .form {
    gap: var(--space-md);
  }
  
  .formInput,
  .formTextarea {
    padding: var(--space-sm) var(--space-md);
    font-size: var(--font-size-sm);
  }
  
  .submitButton {
    padding: var(--space-md) var(--space-lg);
    font-size: var(--font-size-sm);
  }
  
  .contactIcon {
    width: 40px;
    height: 40px;
  }
}
</file>

<file path="src/styles/components/MobileNavOverlay.module.css">
/* src/styles/components/MobileNavOverlay.module.css */

/* Full-screen overlay with dark background */
.overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100vw;
  height: 100vh;
  max-width: 100vw;
  z-index: 1001; /* Above header */
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  box-sizing: border-box;
}

/* Semi-transparent dark background with backdrop blur */
.overlayBackground {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  background: rgba(20, 33, 45, 0.95);
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
  box-sizing: border-box;
}

/* Navigation container - centered */
.navigationContainer {
  position: relative;
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
}

/* Navigation list */
.navigationList {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--space-2xl); /* Generous vertical spacing (32px) */
}

/* Navigation items with large touch targets */
.navItem {
  font-family: var(--font-ui);
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-medium);
  color: var(--color-text-primary);
  text-decoration: none;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  padding: var(--space-md) var(--space-xl);
  min-height: 44px; /* Minimum touch target size */
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--radius-md);
  transition: all var(--duration-normal) var(--ease-out);
  position: relative;
  cursor: pointer;
}

/* Hover state with teal color */
.navItem:hover {
  color: var(--color-primary);
  background: rgba(49, 175, 180, 0.1);
  transform: translateY(-2px);
}

/* Focus state for accessibility */
.navItem:focus {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
  color: var(--color-primary);
}

/* Active state with underline */
.navItem:active {
  transform: translateY(0);
  background: rgba(49, 175, 180, 0.2);
}

/* Light variant styles */
.overlay.light .overlayBackground {
  background: rgba(255, 255, 255, 0.95);
}

.overlay.light .navItem {
  color: var(--color-background-darker);
}

.overlay.light .navItem:hover {
  color: var(--color-primary);
  background: rgba(49, 175, 180, 0.1);
}

.overlay.light .navItem:focus {
  color: var(--color-primary);
}

/* Responsive adjustments */
@media (max-width: 480px) {
  .navigationList {
    gap: var(--space-xl); /* Slightly smaller gap on very small screens */
  }
  
  .navItem {
    font-size: var(--font-size-lg);
    padding: var(--space-sm) var(--space-lg);
  }
}

@media (max-width: 320px) {
  .navItem {
    font-size: var(--font-size-md);
  }
}

/* Enhanced animation support */
.overlay {
  /* Enable hardware acceleration for smooth animations */
  transform: translateZ(0);
  will-change: transform, opacity;
  /* Optimize for mobile performance */
  -webkit-transform: translateZ(0);
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
}

.overlayBackground {
  /* Enable hardware acceleration for backdrop blur */
  transform: translateZ(0);
  will-change: opacity, backdrop-filter;
  -webkit-transform: translateZ(0);
}

.navigationContainer {
  /* Enable hardware acceleration */
  transform: translateZ(0);
  will-change: transform;
  -webkit-transform: translateZ(0);
}

.navigationList {
  /* Optimize list animations */
  transform: translateZ(0);
  will-change: transform;
}

.navItem {
  /* Enable hardware acceleration for hover animations */
  will-change: transform, color, background-color;
  transform: translateZ(0);
  -webkit-transform: translateZ(0);
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .overlay,
  .navItem,
  .navigationContainer,
  .overlayBackground,
  .navigationList {
    transition: none !important;
    animation: none !important;
    will-change: auto;
  }
  
  .navItem:hover {
    transform: none !important;
  }
  
  .navItem:active {
    transform: none !important;
  }
  
  /* Disable animations for specific elements */
  .overlay,
  .overlay *,
  .navigationContainer,
  .navigationContainer *,
  .navItem,
  .overlayBackground {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .overlayBackground {
    background: rgba(0, 0, 0, 0.98);
    backdrop-filter: none;
    -webkit-backdrop-filter: none;
  }
  
  .navItem {
    border: 1px solid var(--color-text-primary);
  }
  
  .navItem:hover,
  .navItem:focus {
    background: var(--color-primary);
    color: var(--color-background-darker);
    border-color: var(--color-primary);
  }
}

/* Focus trap styles - ensure proper focus management */
.overlay:focus-within .navItem:first-child {
  /* First item gets focus when menu opens */
}

/* Ensure overlay is only visible on mobile/tablet */
@media (min-width: 768px) {
  .overlay {
    display: none;
  }
}
</file>

<file path="src/styles/components/WorkCard.module.css">
/* src/styles/components/WorkCard.module.css */

.workCard {
  position: relative;
  background: var(--color-text-primary);
  border-radius: var(--radius-lg);
  overflow: hidden;
  border: 1px solid var(--color-primary-100);
  transition: all var(--duration-normal) var(--ease-out);
  cursor: pointer;
  box-shadow: var(--shadow-sm);
}

.workCard:hover {
  border-color: var(--color-primary-300);
  box-shadow: var(--shadow-xl);
}

.imageContainer {
  position: relative;
  width: 100%;
  height: 250px;
  overflow: hidden;
  background: var(--color-background-lighter);
}

.imageWrapper {
  position: relative;
  width: 100%;
  height: 100%;
}

.image {
  object-fit: cover;
  transition: transform var(--duration-slow) var(--ease-out);
}

.overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--color-background-darker-800);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity var(--duration-normal) var(--ease-out);
}

.workCard:hover .overlay {
  opacity: 1;
}

.viewButton {
  background: var(--color-primary);
  color: var(--color-text-primary);
  border: none;
  padding: var(--space-md) var(--space-xl);
  border-radius: var(--radius-sm);
  font-family: var(--font-ui);
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-sm);
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-out);
}

.viewButton:hover {
  background: var(--color-primary-700);
  transform: translateY(-2px);
}

.content {
  padding: var(--space-lg);
  background: var(--color-text-primary);
}

.meta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--space-sm);
  font-size: var(--font-size-xs);
}

.category {
  color: var(--color-primary);
  font-family: var(--font-ui);
  font-weight: var(--font-weight-medium);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.duration {
  color: var(--color-text-muted);
  font-family: var(--font-ui);
  font-weight: var(--font-weight-normal);
}

.title {
  font-family: var(--font-headline);
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  color: var(--color-background-darker);
  margin-bottom: var(--space-xs);
  line-height: var(--line-height-tight);
}

.client {
  color: var(--color-text-muted);
  font-family: var(--font-body);
  font-size: var(--font-size-sm);
  line-height: var(--line-height-normal);
}

/* Responsive Design */
@media (max-width: 809px) {
  .imageContainer {
    height: 200px;
  }
  
  .content {
    padding: var(--space-md);
  }
  
  .title {
    font-size: var(--font-size-lg);
  }
}

@media (max-width: 390px) {
  .imageContainer {
    height: 180px;
  }
  
  .content {
    padding: var(--space-md) var(--space-md) var(--space-lg);
  }
  
  .viewButton {
    padding: var(--space-sm) var(--space-lg);
    font-size: var(--font-size-xs);
  }
}
</file>

<file path="src/styles/tokens.css">
:root {
  /* Colors - Extracted from original Framer tokens */
  --color-primary: rgb(49, 175, 180);                    /* token-633663d4 - Primary brand color */
  --color-background-darker: rgb(14, 26, 36);            /* token-51170b41 - Darkest background */
  --color-background-lighter: rgb(20, 33, 45);           /* token-e76238c2 - Lighter background */
  --color-background-light: rgb(248, 250, 252);          /* Light background for contrast sections */
  --color-background-neutral: rgb(241, 245, 249);        /* Neutral light background */
  --color-text-primary: rgb(255, 255, 255);              /* White text for dark backgrounds */
  --color-text-primary-dark: rgb(15, 23, 42);            /* Dark text for light backgrounds */
  --color-text-muted: rgb(186, 189, 198);                /* token-dd3bc34b - Muted text color */
  --color-text-muted-dark: rgb(100, 116, 139);           /* Muted text for light backgrounds */
  --color-border-light: rgb(230, 230, 230);              /* token-cf55a365 - Light border color */
  --color-accent-red: rgb(180, 54, 49);                  /* token-da3bfa35 - Red accent color */
  
  /* Typography - Using optimized next/font variables with fallbacks */
  --font-display: var(--font-display), "Inter Tight", system-ui, sans-serif;     /* Primary display font */
  --font-body: var(--font-body), "Plus Jakarta Sans", system-ui, sans-serif;     /* Body text font */
  --font-ui: var(--font-display), "Inter Tight", system-ui, sans-serif;          /* UI elements font */
  --font-headline: "Wix Madefor Display", Georgia, serif;                        /* Headline font with serif fallback */
  --font-mono: ui-monospace, "SF Mono", "Monaco", "Inconsolata", monospace;      /* Monospace font stack */
  
  /* Typography Scale - Based on Framer font weights */
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-bold: 700;
  --font-weight-black: 900;
  
  /* Font Sizes - Responsive scale */
  --font-size-xs: 0.75rem;      /* 12px */
  --font-size-sm: 0.875rem;     /* 14px */
  --font-size-base: 1rem;       /* 16px */
  --font-size-lg: 1.125rem;     /* 18px */
  --font-size-xl: 1.25rem;      /* 20px */
  --font-size-2xl: 1.5rem;      /* 24px */
  --font-size-3xl: 1.875rem;    /* 30px */
  --font-size-4xl: 2.25rem;     /* 36px */
  --font-size-5xl: 3rem;        /* 48px */
  --font-size-6xl: 3.75rem;     /* 60px */
  --font-size-7xl: 4.5rem;      /* 72px */
  
  /* Line Heights */
  --line-height-tight: 1.25;
  --line-height-snug: 1.375;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.625;
  --line-height-loose: 2;
  
  /* Spacing Scale */
  --space-xs: 0.25rem;    /* 4px */
  --space-sm: 0.5rem;     /* 8px */
  --space-md: 1rem;       /* 16px */
  --space-lg: 1.5rem;     /* 24px */
  --space-xl: 2rem;       /* 32px */
  --space-2xl: 3rem;      /* 48px */
  --space-3xl: 4rem;      /* 64px */
  --space-4xl: 5rem;      /* 80px */
  --space-5xl: 6rem;      /* 96px */
  
  /* Border Radius */
  --radius-sm: 0.25rem;   /* 4px */
  --radius-md: 0.5rem;    /* 8px */
  --radius-lg: 1rem;      /* 16px */
  --radius-xl: 1.5rem;    /* 24px */
  --radius-full: 9999px;
  
  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
  
  /* Breakpoints - From Framer responsive design */
  --breakpoint-mobile: 390px;
  --breakpoint-tablet: 810px;
  --breakpoint-desktop: 1200px;
  
  /* Animation - Based on Framer Motion settings */
  --duration-fast: 0.2s;
  --duration-normal: 0.3s;
  --duration-slow: 0.6s;
  --ease-out: cubic-bezier(0.44, 0, 0.56, 1);
  --ease-spring: cubic-bezier(0.68, -0.55, 0.265, 1.55);
  
  /* Spring Animation Values - From Framer appear animations */
  --spring-stiffness: 200;
  --spring-damping: 30;
  --spring-mass: 1;
}

/* Color Variations - Opacity variants of main colors */
:root {
  --color-primary-50: rgb(49, 175, 180, 0.05);
  --color-primary-100: rgb(49, 175, 180, 0.1);
  --color-primary-200: rgb(49, 175, 180, 0.2);
  --color-primary-300: rgb(49, 175, 180, 0.3);
  --color-primary-400: rgb(49, 175, 180, 0.4);
  --color-primary-500: rgb(49, 175, 180, 0.5);
  --color-primary-600: rgb(49, 175, 180, 0.6);
  --color-primary-700: rgb(49, 175, 180, 0.7);
  --color-primary-800: rgb(49, 175, 180, 0.8);
  --color-primary-900: rgb(49, 175, 180, 0.9);
  
  --color-background-darker-50: rgb(14, 26, 36, 0.05);
  --color-background-darker-100: rgb(14, 26, 36, 0.1);
  --color-background-darker-200: rgb(14, 26, 36, 0.2);
  --color-background-darker-300: rgb(14, 26, 36, 0.3);
  --color-background-darker-400: rgb(14, 26, 36, 0.4);
  --color-background-darker-500: rgb(14, 26, 36, 0.5);
  --color-background-darker-600: rgb(14, 26, 36, 0.6);
  --color-background-darker-700: rgb(14, 26, 36, 0.7);
  --color-background-darker-800: rgb(14, 26, 36, 0.8);
  --color-background-darker-900: rgb(14, 26, 36, 0.9);
}

/* Media Queries for Responsive Design */
@media (max-width: 389px) {
  :root {
    --font-size-6xl: 2.5rem;    /* Smaller on mobile */
    --font-size-7xl: 3rem;      /* Smaller on mobile */
    --space-4xl: 3rem;          /* Smaller spacing on mobile */
    --space-5xl: 4rem;          /* Smaller spacing on mobile */
  }
}

@media (min-width: 390px) and (max-width: 809px) {
  :root {
    --font-size-6xl: 3rem;      /* Medium on tablet */
    --font-size-7xl: 3.5rem;    /* Medium on tablet */
  }
}

@media (min-width: 1200px) {
  :root {
    --font-size-6xl: 4rem;      /* Larger on desktop */
    --font-size-7xl: 5rem;      /* Larger on desktop */
    --space-4xl: 6rem;          /* Larger spacing on desktop */
    --space-5xl: 8rem;          /* Larger spacing on desktop */
  }
}

/* Utility Classes for Common Patterns */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.container {
  width: 100%;
  max-width: var(--breakpoint-desktop);
  margin: 0 auto;
  padding: 0 var(--space-lg);
}

@media (max-width: 809px) {
  .container {
    padding: 0 var(--space-md);
  }
}
</file>

<file path="src/components/ui/WorkCard.tsx">
// src/components/ui/WorkCard.tsx
'use client';

import { motion, Variants } from 'framer-motion';
import Image from 'next/image';
import { WorkProject } from '@/types/data';
import styles from '@/styles/components/WorkCard.module.css';

interface WorkCardProps {
  project: WorkProject;
  index: number;
}

const cardVariants: Variants = {
  initial: { scale: 0.9, opacity: 0, y: 60 },
  animate: {
    scale: 1,
    opacity: 1,
    y: 0,
    transition: {
      type: "spring",
      stiffness: 400,
      damping: 90
    }
  },
  hover: {
    scale: 1.02,
    y: -8,
    transition: { 
      duration: 0.3,
      ease: [0.4, 0, 0.2, 1]
    }
  }
};

const imageVariants: Variants = {
  initial: { scale: 1.2 },
  animate: { scale: 1 },
  hover: { scale: 1.1 }
};

export const WorkCard: React.FC<WorkCardProps> = ({ project, index }) => {
  return (
    <motion.article 
      className={styles.workCard}
      variants={cardVariants}
      initial="initial"
      whileInView="animate"
      whileHover="hover"
      viewport={{ once: true, margin: "-50px" }}
      transition={{
        type: "spring",
        stiffness: 400,
        damping: 90,
        delay: index * 0.1
      }}
    >
      <div className={styles.imageContainer}>
        <motion.div 
          className={styles.imageWrapper}
          variants={imageVariants}
        >
          <Image 
            src={project.image}
            alt={project.title}
            fill
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            className={styles.image}
          />
        </motion.div>
        <div className={styles.overlay}>
          <motion.button 
            className={styles.viewButton}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            View Project
          </motion.button>
        </div>
      </div>
      
      <div className={styles.content}>
        <div className={styles.meta}>
          <span className={styles.category}>{project.category}</span>
          <span className={styles.duration}>{project.duration}</span>
        </div>
        <h3 className={styles.title}>{project.title}</h3>
        <p className={styles.client}>{project.client}</p>
      </div>
    </motion.article>
  );
};
</file>

<file path="src/lib/animations/utils.ts">
import { Variants, MotionProps, TargetAndTransition, VariantLabels } from 'framer-motion';

// Utility to create motion props with reduced motion support
export const createMotionProps = (
  variants: Variants,
  options?: {
    viewport?: boolean;
    delay?: number;
    custom?: unknown;
  }
): MotionProps => {
  const prefersReducedMotion = typeof window !== 'undefined' &&
    window.matchMedia('(prefers-reduced-motion: reduce)').matches;

  if (prefersReducedMotion) {
    return {
      initial: false,
      animate: false,
      transition: { duration: 0 }
    };
  }

  const baseProps: MotionProps = {
    variants,
    initial: "initial",
    animate: "animate"
  };

  if (options?.viewport) {
    baseProps.whileInView = "animate";
    baseProps.viewport = {
      once: true,
      margin: "-100px 0px -100px 0px"
    };
  }

  if (options?.delay) {
    baseProps.transition = {
      delay: options.delay
    };
  }

  if (options?.custom !== undefined) {
    baseProps.custom = options.custom;
  }

  return baseProps;
};

// Utility to create stagger motion props
export const createStaggerProps = (
  containerVariants: Variants,
  itemVariants: Variants,
  options?: {
    viewport?: boolean;
    staggerDelay?: number;
  }
) => {
  const prefersReducedMotion = typeof window !== 'undefined' &&
    window.matchMedia('(prefers-reduced-motion: reduce)').matches;

  if (prefersReducedMotion) {
    return {
      container: {
        initial: false,
        animate: false
      },
      item: {
        initial: false,
        animate: false
      }
    };
  }

  const containerProps: MotionProps = {
    variants: containerVariants,
    initial: "hidden",
    animate: "visible"
  };

  const itemProps: MotionProps = {
    variants: itemVariants
  };

  if (options?.viewport) {
    containerProps.whileInView = "visible";
    containerProps.viewport = {
      once: true,
      margin: "-50px 0px -50px 0px"
    };
  }

  return {
    container: containerProps,
    item: itemProps
  };
};

// Utility to check if animations should be enabled
export const shouldAnimate = (): boolean => {
  if (typeof window === 'undefined') return true;
  
  return !window.matchMedia('(prefers-reduced-motion: reduce)').matches;
};

// Utility to create hover props with reduced motion support
export const createHoverProps = (
  hoverVariant: TargetAndTransition | VariantLabels,
  options?: {
    scale?: number;
    duration?: number;
  }
): MotionProps => {
  if (!shouldAnimate()) {
    return {};
  }

  return {
    whileHover: hoverVariant,
    transition: {
      type: "spring",
      stiffness: 400,
      damping: 25,
      duration: options?.duration || 0.2
    }
  };
};

const utilDefaults = {
  createMotionProps,
  createStaggerProps,
  shouldAnimate,
  createHoverProps
};

export default utilDefaults;
</file>

<file path="src/lib/animations/variants.ts">
import { Variants } from 'framer-motion';

// Spring configuration matching original Framer settings
export const springConfig = {
  type: "spring" as const,
  stiffness: 200,
  damping: 30
};

export const quickSpring = {
  type: "spring" as const,
  stiffness: 450,
  damping: 90
};

// Accessibility helper for reduced motion
export const getAnimationProps = () => {
  const prefersReducedMotion = typeof window !== 'undefined' &&
    window.matchMedia('(prefers-reduced-motion: reduce)').matches;
  
  return {
    initial: prefersReducedMotion ? false : "initial",
    animate: prefersReducedMotion ? false : "animate",
    transition: prefersReducedMotion ? { duration: 0 } : undefined
  };
};

// Primary slide animations extracted from Framer appear data
export const slideInLeft: Variants = {
  initial: { 
    x: -192, 
    opacity: 0 
  },
  animate: {
    x: 0,
    opacity: 1,
    transition: springConfig
  }
};

export const slideInRight: Variants = {
  initial: { 
    x: 192, 
    opacity: 0 
  },
  animate: {
    x: 0,
    opacity: 1,
    transition: springConfig
  }
};

// Scroll-triggered slide up animation
export const slideInUp: Variants = {
  initial: { 
    y: -40, 
    opacity: 0.001 
  },
  animate: {
    y: 0,
    opacity: 1,
    transition: {
      type: "spring",
      stiffness: 150,
      damping: 40
    }
  }
};

// Complex scale and slide animation for about section
export const scaleAndSlide: Variants = {
  initial: { 
    scale: 0.1, 
    x: -96, 
    opacity: 0 
  },
  animate: {
    scale: 1,
    x: 0,
    opacity: 1,
    transition: springConfig
  }
};

// Stagger container for work cards and other grid items
export const staggerContainer: Variants = {
  hidden: { 
    opacity: 0 
  },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.1
    }
  }
};

// Individual stagger item (for use with staggerContainer)
export const staggerItem: Variants = {
  hidden: { 
    y: 20, 
    opacity: 0 
  },
  visible: {
    y: 0,
    opacity: 1,
    transition: springConfig
  }
};

// Hover animations for interactive elements
export const hoverScale: Variants = {
  initial: { 
    scale: 1 
  },
  hover: {
    scale: 1.02,
    transition: {
      type: "spring",
      stiffness: 400,
      damping: 25
    }
  }
};

// Fade in animation for general use
export const fadeIn: Variants = {
  initial: { 
    opacity: 0 
  },
  animate: {
    opacity: 1,
    transition: {
      duration: 0.6,
      ease: "easeOut"
    }
  }
};

// Background blur element animation
export const blurElement: Variants = {
  initial: { 
    opacity: 0,
    scale: 0.8,
    rotate: 0
  },
  animate: {
    opacity: 0.3,
    scale: 1,
    rotate: 20,
    transition: {
      duration: 2,
      ease: "easeOut",
      delay: 0.5
    }
  }
};

// Viewport-based animation configuration
export const viewportConfig = {
  once: true,
  margin: "-100px 0px -100px 0px"
};

// Animation presets for common use cases
export const animationPresets = {
  // Hero section animations
  heroTitle: {
    ...slideInLeft,
    animate: {
      ...slideInLeft.animate,
      transition: {
        ...springConfig,
        delay: 0.2
      }
    }
  },
  heroSubtitle: {
    ...slideInRight,
    animate: {
      ...slideInRight.animate,
      transition: {
        ...springConfig,
        delay: 0.4
      }
    }
  },
  
  // Work section animations
  workGrid: staggerContainer,
  workCard: {
    ...staggerItem,
    hover: hoverScale.hover
  },
  
  // About section animations
  aboutContent: scaleAndSlide,
  
  // General scroll animations
  scrollFadeUp: {
    ...slideInUp,
    viewport: viewportConfig
  }
};

const variantDefaults = {
  slideInLeft,
  slideInRight,
  slideInUp,
  scaleAndSlide,
  staggerContainer,
  staggerItem,
  hoverScale,
  fadeIn,
  blurElement,
  animationPresets,
  springConfig,
  quickSpring,
  getAnimationProps,
  viewportConfig
};

export default variantDefaults;
</file>

<file path="src/lib/data/work-projects.ts">
import { WorkProject } from '@/types/data';

export const workProjects: WorkProject[] = [
  {
    id: '1',
    title: 'FinTech Mobile App',
    category: 'Mobile Development',
    client: 'NeoBank Solutions',
    duration: '4 months',
    image: 'https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?w=800&h=600&fit=crop&auto=format',
    description: 'A comprehensive mobile banking application with advanced security features and intuitive user experience.',
    link: 'https://example.com/fintech-app',
    tags: ['React Native', 'TypeScript', 'Fintech', 'Mobile UI']
  },
  {
    id: '2',
    title: 'E-commerce Platform Redesign',
    category: 'Web Development',
    client: 'RetailMax Inc.',
    duration: '6 months',
    image: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800&h=600&fit=crop&auto=format',
    description: 'Complete redesign and development of a high-traffic e-commerce platform with improved conversion rates.',
    link: 'https://example.com/ecommerce-redesign',
    tags: ['Next.js', 'E-commerce', 'Performance', 'UX Design']
  },
  {
    id: '3',
    title: 'SaaS Dashboard Analytics',
    category: 'UI/UX Design',
    client: 'DataViz Pro',
    duration: '3 months',
    image: 'https://images.unsplash.com/photo-1551650975-87deedd944c3?w=800&h=600&fit=crop&auto=format',
    description: 'Modern analytics dashboard with real-time data visualization and interactive reporting features.',
    link: 'https://example.com/saas-dashboard',
    tags: ['Data Visualization', 'React', 'Analytics', 'Dashboard']
  },
  {
    id: '4',
    title: 'Brand Identity & Website',
    category: 'Branding',
    client: 'Sustainable Living Co.',
    duration: '2 months',
    image: 'https://images.unsplash.com/photo-1561070791-2526d30994b5?w=800&h=600&fit=crop&auto=format',
    description: 'Complete brand identity design and website development for an eco-friendly lifestyle brand.',
    link: 'https://example.com/brand-identity',
    tags: ['Branding', 'Web Design', 'Sustainability', 'Identity']
  },
  {
    id: '5',
    title: 'Healthcare Portal',
    category: 'Web Development',
    client: 'MedConnect',
    duration: '5 months',
    image: 'https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?w=800&h=600&fit=crop&auto=format',
    description: 'Secure patient portal with appointment scheduling, medical records, and telemedicine capabilities.',
    link: 'https://example.com/healthcare-portal',
    tags: ['Healthcare', 'Security', 'React', 'HIPAA Compliant']
  },
  {
    id: '6',
    title: 'Creative Portfolio Site',
    category: 'Web Development',
    client: 'Artist Collective',
    duration: '6 weeks',
    image: 'https://images.unsplash.com/photo-1467232004584-a241de8bcf5d?w=800&h=600&fit=crop&auto=format',
    description: 'Interactive portfolio website showcasing digital art with immersive animations and gallery features.',
    link: 'https://example.com/creative-portfolio',
    tags: ['Portfolio', 'Animation', 'Creative', 'Interactive']
  }
];
</file>

<file path="src/styles/components/Layout.module.css">
/* src/styles/components/Layout.module.css */

.mainContent {
  min-height: 100vh;
  padding: 0; /* No sidebar padding - full width layout like Agentic */
  background: var(--color-background-darker);
  position: relative;
  width: 100%;
  /* Account for fixed header - no padding needed as header is transparent initially */
}

/* Ensure sections flow naturally without sidebar constraints */
.mainContent > * {
  width: 100%;
}

/* ================================
   RESPONSIVE DESIGN
   ================================ */

@media (max-width: 809px) {
  .mainContent {
    padding: 0;
  }
}

/* ================================
   ACCESSIBILITY
   ================================ */

@media (prefers-reduced-motion: reduce) {
  .mainContent {
    transition: none;
  }
}
</file>

<file path="src/types/components.ts">
export interface BaseComponentProps {
  className?: string;
  children?: React.ReactNode;
}

export interface IconProps {
  size?: number | string;
  color?: string;
  className?: string;
}

export interface AnimationProps {
  initial?: string | boolean;
  animate?: string | boolean;
  transition?: object;
  variants?: object;
}

export interface HeaderProps {
  fixed?: boolean;
  variant?: 'light' | 'dark';
}

export interface NavigationLink {
  href: string;
  label: string;
}

export interface NavigationItem {
  name: string;
  href: string;
  id: string;
}

export interface MobileNavOverlayProps {
  isOpen: boolean;
  onClose: () => void;
  variant?: 'light' | 'dark';
}
</file>

<file path="src/app/globals.css">
/* src/app/globals.css - UPDATED */
@import '../styles/tokens.css';

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html {
  scroll-behavior: smooth;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  font-family: var(--font-inter), 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  background-color: rgb(255, 255, 255);
  color: rgb(20, 33, 45);
  line-height: 1.6;
}

/* Container utility */
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 48px;
}

@media (max-width: 1199px) {
  .container {
    padding: 0 32px;
  }
}

@media (max-width: 809px) {
  .container {
    padding: 0 24px;
  }
}

@media (max-width: 480px) {
  .container {
    padding: 0 20px;
  }
}

/* Typography utilities */
.h1 {
  font-family: var(--font-inter);
  font-size: clamp(2.5rem, 8vw, 5rem);
  font-weight: 700;
  line-height: 1;
  letter-spacing: -0.02em;
}

.h2 {
  font-family: var(--font-inter);
  font-size: clamp(1.75rem, 5vw, 3rem);
  font-weight: 700;
  line-height: 1.2;
}

.body-lg {
  font-family: var(--font-inter);
  font-size: 1.125rem;
  line-height: 1.7;
}

/* Remove default link styles */
a {
  color: inherit;
  text-decoration: none;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: rgba(20, 33, 45, 0.1);
}

::-webkit-scrollbar-thumb {
  background: var(--color-primary);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(49, 175, 180, 0.8);
}

/* Focus states for accessibility */
button:focus-visible,
a:focus-visible,
input:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}

/* Reduced motion preferences */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
</file>

<file path="src/app/layout.tsx">
// src/app/layout.tsx - UPDATED
import type { Metadata } from "next";
import { Inter_Tight, Plus_Jakarta_Sans } from "next/font/google";
import "./globals.css";

// Configure Inter Tight for display/heading text
const interTight = Inter_Tight({
  variable: "--font-display",
  subsets: ["latin"],
  display: 'swap',
  fallback: ['system-ui', 'arial'],
  weight: ['400', '500', '600', '700', '800', '900'],
});

// Configure Plus Jakarta Sans for body text
const plusJakartaSans = Plus_Jakarta_Sans({
  variable: "--font-body",
  subsets: ["latin"],
  display: 'swap',
  fallback: ['system-ui', 'arial'],
  weight: ['300', '400', '500', '600', '700'],
});

// Configure Wix Madefor Display using next/font/google
import { Wix_Madefor_Display } from "next/font/google";

const wixMadeforDisplay = Wix_Madefor_Display({
  variable: "--font-wix-madefor",
  subsets: ["latin"],
  display: 'swap',
  weight: ['400', '500', '600', '700'],
});

export const metadata: Metadata = {
  title: "Creative Current - Elevating Digital Excellence",
  description: "We specialize in web design, development, UI/UX, and product design. Transform your online presence with our creative expertise.",
  keywords: "web design, web development, UI/UX, product design, digital agency",
  authors: [{ name: "Creative Current" }],
  viewport: "width=device-width, initial-scale=1",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${interTight.variable} ${plusJakartaSans.variable} ${wixMadeforDisplay.variable} antialiased`}>
        {children}
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
// src/app/page.tsx
import { Layout } from '@/components/global/Layout';
import { Hero } from '@/components/sections/Hero';
import { WorkSection } from '@/components/sections/WorkSection';
import { TeamSection } from '@/components/sections/TeamSection';
import { ContactSection } from '@/components/sections/ContactSection';
import { workProjects } from '@/lib/data/work-projects';

export default function Home() {
  return (
    <Layout>
      <Hero />
      <WorkSection
        projects={workProjects.slice(0, 3)}
      />
      <TeamSection />
      <ContactSection />
    </Layout>
  );
}
</file>

<file path="src/components/global/Footer.tsx">
// src/components/global/Footer.tsx
'use client';

import { motion, Variants } from 'framer-motion';
import Link from 'next/link';
import styles from '@/styles/components/Footer.module.css';

const footerVariants: Variants = {
  hidden: { opacity: 0, y: 50 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.6,
      ease: [0.4, 0, 0.2, 1],
      staggerChildren: 0.1
    }
  }
};

const itemVariants: Variants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  }
};

export const Footer = () => {
  const currentYear = new Date().getFullYear();

  return (
    <motion.footer 
      className={styles.footer}
      variants={footerVariants}
      initial="hidden"
      whileInView="visible"
      viewport={{ once: true, margin: "-50px" }}
    >
      <div className="container">
        <div className={styles.footerContent}>
          {/* Brand Section */}
          <motion.div 
            className={styles.brandSection}
            variants={itemVariants}
          >
            <Link href="/" className={styles.logo}>
              <span className={styles.logoText}>Agentic</span>
            </Link>
            <p className={styles.brandDescription}>
              Elevating digital experiences through innovative design and development.
            </p>
            <div className={styles.socialLinks}>
              <motion.a
                href="https://linkedin.com/company/agentic"
                target="_blank"
                rel="noopener noreferrer"
                className={styles.socialLink}
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
              </motion.a>
              
              <motion.a
                href="https://twitter.com/agentic"
                target="_blank"
                rel="noopener noreferrer"
                className={styles.socialLink}
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                </svg>
              </motion.a>
              
              <motion.a
                href="https://dribbble.com/agentic"
                target="_blank"
                rel="noopener noreferrer"
                className={styles.socialLink}
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 0C5.374 0 0 5.373 0 12s5.374 12 12 12 12-5.373 12-12S18.626 0 12 0zm9.568 7.375c.53 1.104.846 2.342.846 3.652 0 .469-.04.926-.115 1.372-.145-.013-.29-.024-.437-.033-2.33-.145-4.73.07-6.61.57-.145-.35-.29-.7-.44-1.05 2.16-.93 4.17-2.284 5.756-4.511zm-1.415-1.415c-1.415 1.415-3.315 2.315-5.315 2.715-.7-1.3-1.5-2.5-2.4-3.6 1.8-.6 3.8-.9 5.8-.9.63 0 1.25.05 1.85.15.02.21.04.42.065.635zm-2.568-2.568c-.6-.1-1.2-.15-1.85-.15-2.2 0-4.3.35-6.2 1-1.1-1.1-2.4-2-3.9-2.6C7.374 1.026 9.6.374 12 .374c2.4 0 4.626.652 6.585 1.818zm-8.585 1.818c1.9-.65 4-.95 6.2-.95.65 0 1.25.05 1.85.15-.025.215-.045.425-.065.635-1.585 2.227-3.596 3.581-5.756 4.511-.95-1.8-2.1-3.4-3.4-4.8.39-.18.79-.35 1.17-.546zm-1.17.546c1.3 1.4 2.45 3 3.4 4.8-2.16.93-4.17 2.284-5.756 4.511-.53-1.104-.846-2.342-.846-3.652 0-2.4.652-4.626 1.818-6.585.128.042.256.084.384.126zm-.384 8.126c1.585-2.227 3.596-3.581 5.756-4.511.15.35.295.7.44 1.05-1.88.5-4.28.715-6.61.57-.147.009-.292.02-.437.033-.075-.446-.115-.903-.115-1.372 0-.469.04-.926.115-1.372.145.013.29.024.437.033 2.33.145 4.73-.07 6.61-.57.145.35.29.7.44 1.05-2.16.93-4.17 2.284-5.756 4.511-.53-1.104-.846-2.342-.846-3.652s.316-2.548.846-3.652z"/>
                </svg>
              </motion.a>
            </div>
          </motion.div>

          {/* Quick Links */}
          <motion.div 
            className={styles.linksSection}
            variants={itemVariants}
          >
            <h4 className={styles.sectionTitle}>Quick Links</h4>
            <nav className={styles.linksList}>
              <Link href="#work-section" className={styles.footerLink}>Work</Link>
              <Link href="#contact" className={styles.footerLink}>Contact</Link>
              <Link href="/privacy" className={styles.footerLink}>Privacy Policy</Link>
              <Link href="/terms" className={styles.footerLink}>Terms of Service</Link>
            </nav>
          </motion.div>

          {/* Services */}
          <motion.div 
            className={styles.servicesSection}
            variants={itemVariants}
          >
            <h4 className={styles.sectionTitle}>Services</h4>
            <div className={styles.servicesList}>
              <span className={styles.serviceItem}>Web Design</span>
              <span className={styles.serviceItem}>Development</span>
              <span className={styles.serviceItem}>UI/UX Design</span>
              <span className={styles.serviceItem}>Branding</span>
            </div>
          </motion.div>

          {/* Contact Info */}
          <motion.div 
            className={styles.contactSection}
            variants={itemVariants}
          >
            <h4 className={styles.sectionTitle}>Get In Touch</h4>
            <div className={styles.contactInfo}>
              <p className={styles.contactItem}>hello@agentic.design</p>
              <p className={styles.contactItem}>+1 (555) 123-4567</p>
              <p className={styles.contactItem}>San Francisco, CA</p>
            </div>
          </motion.div>
        </div>

        {/* Bottom Bar */}
        <motion.div 
          className={styles.bottomBar}
          variants={itemVariants}
        >
          <p className={styles.copyright}>
            © {currentYear} Agentic. All rights reserved.
          </p>
          <p className={styles.madeWith}>
            Made with ❤️ in San Francisco
          </p>
        </motion.div>
      </div>
    </motion.footer>
  );
};
</file>

<file path="src/components/global/Layout.tsx">
// src/components/global/Layout.tsx - UPDATED
import { Header } from '@/components/global/Header';
import { Footer } from '@/components/global/Footer';
import styles from '@/styles/components/Layout.module.css';

interface LayoutProps {
  children: React.ReactNode;
}

export const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <>
      <Header fixed={true} variant="dark" />
      <main id="main-content" className={styles.mainContent}>
        {children}
      </main>
      <Footer />
    </>
  );
};
</file>

<file path="src/components/global/MobileNavOverlay.tsx">
// src/components/global/MobileNavOverlay.tsx
'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { useEffect } from 'react';
import styles from '@/styles/components/MobileNavOverlay.module.css';

interface NavigationItem {
  name: string;
  href: string;
  id: string;
}

interface MobileNavOverlayProps {
  isOpen: boolean;
  onClose: () => void;
  variant?: 'light' | 'dark';
}

const navigationItems: NavigationItem[] = [
  { name: 'WORK', href: '#work-section', id: 'work' },
  { name: 'ABOUT', href: '#about-section', id: 'about' },
  { name: 'SERVICES', href: '#services', id: 'services' },
  { name: 'CONTACT', href: '#footer-background', id: 'contact' },
];

export const MobileNavOverlay: React.FC<MobileNavOverlayProps> = ({
  isOpen,
  onClose,
  variant = 'dark'
}) => {
  // Handle smooth scrolling functionality for navigation links
  const handleSmoothScroll = (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {
    e.preventDefault();

    // Close menu before scrolling with enhanced timing
    onClose();

    // Delay to allow menu close animation to complete before scrolling
    setTimeout(() => {
      const targetId = href.replace('#', '');
      const targetElement = document.getElementById(targetId);

      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    }, 200); // Increased delay to match exit animation timing
  };

  // Handle click outside to close menu
  const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  // Handle keyboard navigation
  useEffect(() => {
    if (!isOpen) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isOpen, onClose]);

  // Focus management - focus first navigation item when menu opens
  useEffect(() => {
    if (isOpen) {
      const firstNavItem = document.querySelector(`.${styles.navItem}`) as HTMLElement;
      if (firstNavItem) {
        firstNavItem.focus();
      }
    }
  }, [isOpen]);

  const overlayVariants = {
    hidden: {
      opacity: 0,
      x: '100%',
      scale: 0.95,
    },
    visible: {
      opacity: 1,
      x: 0,
      scale: 1,
    },
    exit: {
      opacity: 0,
      x: '100%',
      scale: 0.95,
    },
  };

  const backgroundVariants = {
    hidden: {
      opacity: 0,
    },
    visible: {
      opacity: 1,
    },
    exit: {
      opacity: 0,
    },
  };

  const itemVariants = {
    hidden: {
      opacity: 0,
      y: 30,
      x: 20,
      scale: 0.9,
    },
    visible: {
      opacity: 1,
      y: 0,
      x: 0,
      scale: 1,
    },
    exit: {
      opacity: 0,
      y: -20,
      x: 30,
      scale: 0.9,
    },
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          className={`${styles.overlay} ${variant === 'light' ? styles.light : styles.dark}`}
          variants={overlayVariants}
          initial="hidden"
          animate="visible"
          exit="exit"
          transition={{
            duration: 0.4,
            ease: 'easeOut',
          }}
          onClick={handleOverlayClick}
          role="dialog"
          aria-modal="true"
          aria-label="Mobile navigation menu"
        >
          <motion.div
            className={styles.overlayBackground}
            variants={backgroundVariants}
            initial="hidden"
            animate="visible"
            exit="exit"
            transition={{
              duration: 0.4,
              ease: 'easeOut',
            }}
          />

          <motion.nav
            className={styles.navigationContainer}
            role="navigation"
            aria-label="Main navigation"
          >
            <motion.ul
              className={styles.navigationList}
              initial="hidden"
              animate="visible"
              exit="exit"
              transition={{
                staggerChildren: 0.08,
                delayChildren: 0.15,
              }}
            >
              {navigationItems.map((item) => (
                <motion.li
                  key={item.id}
                  variants={itemVariants}
                  transition={{
                    type: 'spring',
                    stiffness: 100,
                    damping: 15,
                  }}
                  whileHover={{
                    scale: 1.05,
                    y: -2,
                  }}
                  whileTap={{
                    scale: 0.98,
                  }}
                >
                  <a
                    href={item.href}
                    className={styles.navItem}
                    onClick={(e) => handleSmoothScroll(e, item.href)}
                    tabIndex={0}
                    role="menuitem"
                  >
                    {item.name}
                  </a>
                </motion.li>
              ))}
            </motion.ul>
          </motion.nav>
        </motion.div>
      )}
    </AnimatePresence>
  );
};
</file>

<file path="src/components/sections/ContactSection.tsx">
// src/components/sections/ContactSection.tsx
'use client';

import { motion, Variants } from 'framer-motion';
import { useState } from 'react';
import styles from '@/styles/components/ContactSection.module.css';

const sectionVariants: Variants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.2,
      delayChildren: 0.1
    }
  }
};

const itemVariants: Variants = {
  hidden: { opacity: 0, y: 30 },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      type: "spring" as const,
      stiffness: 200,
      damping: 30
    }
  }
};

const formVariants: Variants = {
  hidden: { opacity: 0, x: 50 },
  visible: {
    opacity: 1,
    x: 0,
    transition: {
      type: "spring" as const,
      stiffness: 150,
      damping: 25,
      delay: 0.3
    }
  }
};

export const ContactSection = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    company: '',
    message: ''
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Handle form submission here
    console.log('Form submitted:', formData);
  };

  return (
    <motion.section 
      id="contact"
      className={styles.contactSection}
      variants={sectionVariants}
      initial="hidden"
      whileInView="visible"
      viewport={{ once: true, margin: "-100px" }}
    >
      <div className="container">
        <div className={styles.contactGrid}>
          {/* Contact Info */}
          <motion.div 
            className={styles.contactInfo}
            variants={itemVariants}
          >
            <motion.h2 
              className={styles.sectionTitle}
              variants={itemVariants}
            >
              Let&apos;s Create Something Amazing Together
            </motion.h2>
            
            <motion.p 
              className={styles.sectionDescription}
              variants={itemVariants}
            >
              Ready to transform your digital presence? We&apos;d love to hear about your project and explore how we can bring your vision to life.
            </motion.p>

            <motion.div 
              className={styles.contactDetails}
              variants={itemVariants}
            >
              <div className={styles.contactItem}>
                <div className={styles.contactIcon}>
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                  </svg>
                </div>
                <div className={styles.contactText}>
                  <h4>Email Us</h4>
                  <p>hello@agentic.design</p>
                </div>
              </div>

              <div className={styles.contactItem}>
                <div className={styles.contactIcon}>
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                  </svg>
                </div>
                <div className={styles.contactText}>
                  <h4>Call Us</h4>
                  <p>+1 (555) 123-4567</p>
                </div>
              </div>

              <div className={styles.contactItem}>
                <div className={styles.contactIcon}>
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
                  </svg>
                </div>
                <div className={styles.contactText}>
                  <h4>Visit Us</h4>
                  <p>San Francisco, CA</p>
                </div>
              </div>
            </motion.div>
          </motion.div>

          {/* Contact Form */}
          <motion.div 
            className={styles.contactForm}
            variants={formVariants}
          >
            <form onSubmit={handleSubmit} className={styles.form}>
              <div className={styles.formGroup}>
                <input
                  type="text"
                  name="name"
                  placeholder="Your Name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className={styles.formInput}
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <input
                  type="email"
                  name="email"
                  placeholder="Your Email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className={styles.formInput}
                  required
                />
              </div>

              <div className={styles.formGroup}>
                <input
                  type="text"
                  name="company"
                  placeholder="Company (Optional)"
                  value={formData.company}
                  onChange={handleInputChange}
                  className={styles.formInput}
                />
              </div>

              <div className={styles.formGroup}>
                <textarea
                  name="message"
                  placeholder="Tell us about your project..."
                  value={formData.message}
                  onChange={handleInputChange}
                  className={styles.formTextarea}
                  rows={5}
                  required
                />
              </div>

              <motion.button
                type="submit"
                className={styles.submitButton}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                Send Message
              </motion.button>
            </form>
          </motion.div>
        </div>
      </div>
    </motion.section>
  );
};
</file>

<file path="src/components/ui/TeamMember.tsx">
// src/components/ui/TeamMember.tsx
'use client';

import { motion, Variants } from 'framer-motion';
import Image from 'next/image';
import { TeamMember as TeamMemberType } from '@/types/data';
import styles from '@/styles/components/TeamMember.module.css';

interface TeamMemberProps {
  member: TeamMemberType;
  index?: number;
}

const memberVariants: Variants = {
  hidden: { 
    opacity: 0,
    y: 60,
    scale: 0.9
  },
  visible: {
    opacity: 1,
    y: 0,
    scale: 1,
    transition: {
      type: "spring",
      stiffness: 200,
      damping: 30
    }
  }
};

const imageVariants: Variants = {
  initial: { scale: 1 },
  hover: { 
    scale: 1.05,
    transition: { 
      duration: 0.3,
      ease: [0.4, 0, 0.2, 1]
    }
  }
};

const socialIconVariants: Variants = {
  initial: { scale: 1, opacity: 0.7 },
  hover: { 
    scale: 1.1,
    opacity: 1,
    transition: { 
      duration: 0.2,
      ease: [0.4, 0, 0.2, 1]
    }
  }
};

export const TeamMember: React.FC<TeamMemberProps> = ({ member, index = 0 }) => {
  return (
    <motion.div 
      className={styles.teamMember}
      variants={memberVariants}
      initial="hidden"
      whileInView="visible"
      whileHover="hover"
      viewport={{ once: true, margin: "-50px" }}
      transition={{
        type: "spring",
        stiffness: 200,
        damping: 30,
        delay: index * 0.1
      }}
    >
      <div className={styles.memberCard}>
        <div className={styles.imageContainer}>
          <motion.div 
            className={styles.imageWrapper}
            variants={imageVariants}
          >
            <Image 
              src={member.image}
              alt={member.name}
              fill
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
              className={styles.memberImage}
            />
          </motion.div>
          
          {/* Social Links Overlay */}
          <div className={styles.socialOverlay}>
            <div className={styles.socialLinks}>
              {member.socialLinks.linkedin && (
                <motion.a
                  href={member.socialLinks.linkedin}
                  target="_blank"
                  rel="noopener noreferrer"
                  className={styles.socialLink}
                  variants={socialIconVariants}
                  whileHover="hover"
                  initial="initial"
                >
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                  </svg>
                </motion.a>
              )}
              
              {member.socialLinks.twitter && (
                <motion.a
                  href={member.socialLinks.twitter}
                  target="_blank"
                  rel="noopener noreferrer"
                  className={styles.socialLink}
                  variants={socialIconVariants}
                  whileHover="hover"
                  initial="initial"
                >
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                  </svg>
                </motion.a>
              )}
              
              {member.socialLinks.portfolio && (
                <motion.a
                  href={member.socialLinks.portfolio}
                  target="_blank"
                  rel="noopener noreferrer"
                  className={styles.socialLink}
                  variants={socialIconVariants}
                  whileHover="hover"
                  initial="initial"
                >
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                  </svg>
                </motion.a>
              )}
              
              {member.socialLinks.email && (
                <motion.a
                  href={`mailto:${member.socialLinks.email}`}
                  className={styles.socialLink}
                  variants={socialIconVariants}
                  whileHover="hover"
                  initial="initial"
                >
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                  </svg>
                </motion.a>
              )}
            </div>
          </div>
        </div>
        
        <div className={styles.memberInfo}>
          <h3 className={styles.memberName}>{member.name}</h3>
          <p className={styles.memberTitle}>{member.title}</p>
          <blockquote className={styles.memberQuote}>
            &ldquo;{member.quote}&rdquo;
          </blockquote>
        </div>
      </div>
    </motion.div>
  );
};
</file>

<file path="src/components/global/Header.tsx">
// src/components/global/Header.tsx - Mobile Navigation with Hamburger
'use client';

import { motion } from 'framer-motion';
import { useState, useEffect } from 'react';
import styles from '@/styles/components/Header.module.css';
import { HeaderProps } from '@/types/components';
import { BurgerIcon } from '@/components/icons/BurgerIcon';
import { MobileNavOverlay } from '@/components/global/MobileNavOverlay';

// Navigation items for future use
// const navigationItems = [
//   { name: 'WORK', href: '#work-section' },
//   { name: 'ABOUT', href: '#about-section' },
//   { name: 'SERVICES', href: '#services' },
//   { name: 'CONTACT', href: '#footer-background' },
// ];

export const Header: React.FC<HeaderProps> = ({ 
  fixed = true, 
  variant = 'dark' 
}) => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isAnimating, setIsAnimating] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Handle viewport changes and auto-close menu on desktop
  useEffect(() => {
    const handleResize = () => {
      // Close mobile menu when transitioning to desktop (768px breakpoint)
      if (window.innerWidth >= 768 && isMobileMenuOpen) {
        setIsMobileMenuOpen(false);
        setIsAnimating(false);
      }
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [isMobileMenuOpen]);

  const handleSmoothScroll = (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {
    e.preventDefault();
    const targetId = href.replace('#', '');
    const targetElement = document.getElementById(targetId);
    
    if (targetElement) {
      targetElement.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  };

  // Toggle function for opening/closing mobile menu
  const toggleMobileMenu = () => {
    // Prevent rapid toggling by checking animation state
    if (isAnimating) return;
    
    setIsAnimating(true);
    setIsMobileMenuOpen(!isMobileMenuOpen);
    
    // Reset animation state after animation completes
    setTimeout(() => {
      setIsAnimating(false);
    }, 400); // Match animation duration from design
  };

  // Close mobile menu function
  const closeMobileMenu = () => {
    if (isAnimating) return;
    
    setIsAnimating(true);
    setIsMobileMenuOpen(false);
    
    setTimeout(() => {
      setIsAnimating(false);
    }, 300); // Slightly shorter for close animation
  };

  return (
    <motion.div 
      className={`${styles.header} ${fixed ? styles.fixed : ''} ${variant === 'light' ? styles.light : styles.dark} ${isScrolled ? styles.scrolled : ''}`}
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
      role="banner"
    >
      <div className={styles.headerContent}>
        {/* Logo/HOME link */}
        <motion.div 
          className={styles.logoContainer}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2, duration: 0.6 }}
        >
          <a 
            href="#hero-section" 
            className={styles.homeLink}
            onClick={(e) => handleSmoothScroll(e, '#hero-section')}
          >
            HOME
          </a>
        </motion.div>

        {/* Burger Menu Icon - Mobile Only */}
        <motion.div 
          className={styles.burgerMenuContainer}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.4, duration: 0.6 }}
        >
          <BurgerIcon
            isOpen={isMobileMenuOpen}
            onClick={toggleMobileMenu}
            variant={variant}
            size={24}
            className={styles.burgerMenuIcon}
          />
        </motion.div>
      </div>

      {/* Mobile Navigation Overlay */}
      <MobileNavOverlay
        isOpen={isMobileMenuOpen}
        onClose={closeMobileMenu}
        variant={variant}
      />
    </motion.div>
  );
};
</file>

<file path="src/styles/components/WorkSection.module.css">
/* src/styles/components/WorkSection.module.css */

.workSection {
  background-color: var(--color-background-darker);
  position: relative;
  z-index: 1;
  width: 100%;
  max-width: 100vw;
}

.workItem {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  padding: 24px;
  position: sticky;
  top: 0;
  width: 100%;
  max-width: 100vw;
  box-sizing: border-box;
  will-change: transform;
  z-index: 1;
}

.workItemContainer {
  width: 100%;
  max-width: 1200px;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
}

.workCard {
  background-color: var(--color-background-lighter);
  border: 1px solid var(--color-primary);
  border-radius: 60px;
  box-shadow: 1px 1px 20px 1px rgba(49, 175, 180, 0.5);
  display: flex;
  flex: 1;
  height: 100%;
  max-height: calc(100vh - 48px);
  overflow: hidden;
  position: relative;
  will-change: transform;
}

.workCardInner {
  display: flex;
  flex-direction: row;
  gap: 24px;
  height: 100%;
  width: 100%;
  position: absolute;
  inset: 0;
  padding: 0;
}

.workContent {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--space-2xl);
}

.workMeta {
  max-width: 400px;
}

.workLabel {
  font-family: var(--font-body);
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  color: var(--color-text-muted);
  text-transform: uppercase;
  letter-spacing: 0.1em;
  margin-bottom: var(--space-md);
  display: block;
}

.workTitle {
  font-family: var(--font-headline);
  font-size: clamp(2rem, 4vw, 3.5rem);
  font-weight: 700;
  color: var(--color-text-primary);
  line-height: 1.1;
  margin-bottom: var(--space-xl);
}

.workDetails {
  margin-bottom: var(--space-xl);
}

.workDetailItem {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--space-sm) 0;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.workDetailItem:last-child {
  border-bottom: none;
}

.workDetailLabel {
  font-family: var(--font-body);
  font-size: var(--font-size-sm);
  color: var(--color-text-muted);
  font-weight: var(--font-weight-medium);
}

.workDetailValue {
  font-family: var(--font-body);
  font-size: var(--font-size-sm);
  color: var(--color-text-primary);
  font-weight: var(--font-weight-medium);
}

.viewProjectButton {
  background-color: var(--color-primary);
  border: none;
  border-radius: 30px;
  color: var(--color-background-darker);
  font-family: var(--font-body);
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-bold);
  padding: var(--space-md) var(--space-xl);
  cursor: pointer;
  transition: all 0.3s ease;
}

.viewProjectButton:hover {
  background-color: rgba(49, 175, 180, 0.9);
  transform: translateY(-2px);
}

.workImage {
  flex: 1;
  position: relative;
  height: 100%;
}

.workImageContainer {
  position: relative;
  width: 100%;
  height: 100%;
  border-radius: 0 60px 60px 0;
  overflow: hidden;
}

.projectImage {
  object-fit: cover;
  object-position: center;
}

/* Scroll Indicator */
.scrollIndicator {
  position: fixed;
  right: var(--space-xl);
  top: 50%;
  transform: translateY(-50%);
  z-index: 10;
  display: flex;
  align-items: center;
  gap: var(--space-md);
}

/* Hide scroll indicator on mobile to avoid conflicts with mobile menu */
@media (max-width: 767px) {
  .scrollIndicator {
    display: none;
  }
}

.scrollTrack {
  width: 2px;
  height: 200px;
  background-color: rgba(255, 255, 255, 0.2);
  border-radius: 1px;
  position: relative;
  overflow: hidden;
}

.scrollProgress {
  width: 100%;
  height: 100%;
  background: linear-gradient(
    to bottom,
    var(--color-primary),
    rgba(49, 175, 180, 0.6)
  );
  border-radius: 1px;
  transform-origin: top;
  will-change: transform;
}

.scrollDots {
  display: flex;
  flex-direction: column;
  gap: var(--space-md);
  margin-left: var(--space-sm);
}

.scrollDot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.3);
  transition: all 0.3s ease;
  cursor: pointer;
}

.scrollDotActive {
  background-color: var(--color-primary);
  transform: scale(1.2);
  box-shadow: 0 0 12px rgba(49, 175, 180, 0.6);
}

/* Responsive Design */
@media (max-width: 1199px) {
  .workItem {
    padding: var(--space-lg);
  }
  
  .workCard {
    border-radius: 40px;
  }
  
  .workImageContainer {
    border-radius: 0 40px 40px 0;
  }
  
  .workContent {
    padding: var(--space-xl);
  }
  
  .workTitle {
    font-size: clamp(1.75rem, 3.5vw, 2.5rem);
  }
  
  .scrollIndicator {
    right: var(--space-lg);
  }
  
  .scrollTrack {
    height: 150px;
  }
}

@media (max-width: 809px) {
  .workItem {
    padding: var(--space-md);
  }
  
  .workCard {
    border-radius: 30px;
  }
  
  .workCardInner {
    flex-direction: column;
    gap: 0;
  }
  
  .workContent {
    flex: none;
    padding: var(--space-xl) var(--space-lg);
  }
  
  .workImage {
    flex: 1;
  }
  
  .workImageContainer {
    border-radius: 0 0 30px 30px;
  }
  
  .workTitle {
    font-size: clamp(1.5rem, 3vw, 2rem);
    margin-bottom: var(--space-lg);
  }
  
  .workDetails {
    margin-bottom: var(--space-lg);
  }
  
  .scrollIndicator {
    right: var(--space-md);
  }
  
  .scrollTrack {
    height: 120px;
  }
  
  .scrollDots {
    gap: var(--space-sm);
  }
  
  .scrollDot {
    width: 6px;
    height: 6px;
  }
}

@media (max-width: 390px) {
  .workItem {
    padding: var(--space-sm);
  }
  
  .workCard {
    border-radius: 20px;
  }
  
  .workContent {
    padding: var(--space-lg) var(--space-md);
  }
  
  .workImageContainer {
    border-radius: 0 0 20px 20px;
  }
  
  .workTitle {
    font-size: clamp(1.25rem, 2.5vw, 1.75rem);
  }
  
  .viewProjectButton {
    padding: var(--space-sm) var(--space-lg);
    font-size: var(--font-size-sm);
  }
  
  .scrollIndicator {
    right: var(--space-sm);
  }
  
  .scrollTrack {
    height: 100px;
  }
}
</file>

<file path="src/components/sections/WorkSection.tsx">
// src/components/sections/WorkSection.tsx
'use client';

import { motion, useScroll, useTransform, Variants } from 'framer-motion';
import Image from 'next/image';
import { useRef, useState, useEffect } from 'react';
import { WorkProject } from '@/types/data';
// import { staggerContainer } from '@/lib/animations/variants';
import styles from '@/styles/components/WorkSection.module.css';

interface WorkSectionProps {
  projects: WorkProject[];
  title?: string;
}

const workCardVariants: Variants = {
  hidden: { 
    opacity: 0,
    y: 100,
    scale: 0.8
  },
  visible: {
    opacity: 1,
    y: 0,
    scale: 1,
    transition: {
      type: "spring",
      stiffness: 100,
      damping: 20
    }
  }
};

export const WorkSection: React.FC<WorkSectionProps> = ({ projects }) => {
  const sectionRef = useRef<HTMLElement>(null);
  const [activeIndex, setActiveIndex] = useState(0);
  const [isInView, setIsInView] = useState(false);
  
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  });

  // Transform scroll progress to match the number of projects
  const progressValue = useTransform(
    scrollYProgress,
    [0, 1],
    [0, projects.length || 1]
  );

  // Track visibility of work section
  const sectionVisibility = useTransform(
    scrollYProgress,
    [0, 0.1, 0.9, 1],
    [0, 1, 1, 0]
  );

  useEffect(() => {
    const unsubscribe = progressValue.onChange((latest) => {
      const newIndex = Math.min(Math.floor(latest), projects.length - 1);
      setActiveIndex(Math.max(0, newIndex));
    });

    return unsubscribe;
  }, [progressValue, projects.length]);

  useEffect(() => {
    const unsubscribe = sectionVisibility.onChange((latest) => {
      setIsInView(latest > 0.1);
    });

    return unsubscribe;
  }, [sectionVisibility]);

  // Defensive check for projects array
  if (!projects || projects.length === 0) {
    return null;
  }

  return (
    <motion.section 
      ref={sectionRef}
      id="work-section"
      className={styles.workSection}
    >
      {/* Scroll Progress Indicator */}
      <motion.div 
        className={styles.scrollIndicator}
        initial={{ opacity: 0, x: 20 }}
        animate={{ 
          opacity: isInView ? 1 : 0,
          x: isInView ? 0 : 20
        }}
        transition={{ 
          duration: 0.3,
          ease: [0.4, 0, 0.2, 1]
        }}
      >
        <div className={styles.scrollTrack}>
          <motion.div 
            className={styles.scrollProgress}
            style={{
              scaleY: sectionVisibility
            }}
          />
        </div>
        <div className={styles.scrollDots}>
          {projects.map((_, index) => (
            <motion.div
              key={index}
              className={`${styles.scrollDot} ${
                index === activeIndex ? styles.scrollDotActive : ''
              }`}
              initial={{ scale: 0 }}
              animate={{ scale: isInView ? 1 : 0 }}
              transition={{ 
                delay: index * 0.1,
                duration: 0.2,
                ease: [0.4, 0, 0.2, 1]
              }}
            />
          ))}
        </div>
      </motion.div>

      {projects.map((project, index) => (
        <motion.div
          key={project.id}
          className={styles.workItem}
          id={`work-${index + 1}`}
        >
          <div className={styles.workItemContainer}>
            <motion.div 
              className={styles.workCard}
              variants={workCardVariants}
              initial="hidden"
              whileInView="visible"
              viewport={{ once: true, margin: "-20%" }}
              transition={{
                type: "spring",
                stiffness: 100,
                damping: 20,
                delay: index * 0.2
              }}
            >
              <div className={styles.workCardInner}>
                <div className={styles.workContent}>
                  <div className={styles.workMeta}>
                    <span className={styles.workLabel}>(WORK)</span>
                    <h2 className={styles.workTitle}>{project.title}</h2>
                    <div className={styles.workDetails}>
                      <div className={styles.workDetailItem}>
                        <span className={styles.workDetailLabel}>Category:</span>
                        <span className={styles.workDetailValue}>{project.category}</span>
                      </div>
                      <div className={styles.workDetailItem}>
                        <span className={styles.workDetailLabel}>Client:</span>
                        <span className={styles.workDetailValue}>{project.client}</span>
                      </div>
                      <div className={styles.workDetailItem}>
                        <span className={styles.workDetailLabel}>Duration:</span>
                        <span className={styles.workDetailValue}>{project.duration}</span>
                      </div>
                    </div>
                    <motion.button 
                      className={styles.viewProjectButton}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      View Project
                    </motion.button>
                  </div>
                </div>
                
                <div className={styles.workImage}>
                  <div className={styles.workImageContainer}>
                    <Image
                      src={project.image}
                      alt={project.title}
                      fill
                      sizes="(max-width: 768px) 100vw, 50vw"
                      className={styles.projectImage}
                    />
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        </motion.div>
      ))}
    </motion.section>
  );
};
</file>

<file path="src/styles/components/Header.module.css">
/* src/styles/components/Header.module.css - Mobile Navigation with Hamburger */

/* IMPORTANT: Only show header on mobile/tablet, hidden on desktop */
.header {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  z-index: 100;
  background: transparent;
  transition: all var(--duration-normal) var(--ease-out);
  pointer-events: none;
  display: block; /* Show by default for mobile */
  overflow: hidden; /* Prevent content overflow */
  width: 100%;
  box-sizing: border-box;
}

/* Hide header on desktop viewports (768px and above) */
@media (min-width: 768px) {
  .header {
    display: none !important;
  }
}

.header.fixed {
  position: fixed;
  z-index: 1000;
}

.header.scrolled {
  background: var(--color-background-darker-800);
  backdrop-filter: blur(20px);
  -webkit-backdrop-filter: blur(20px);
  border-bottom: 1px solid var(--color-background-darker-300);
}

.headerContent {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding: var(--space-xl) var(--space-2xl);
  max-width: 100%;
  margin: 0;
  transition: padding var(--duration-normal) var(--ease-out);
  box-sizing: border-box;
  width: 100%;
}

/* Logo Container */
.logoContainer {
  pointer-events: auto;
}

.homeLink {
  font-family: var(--font-ui);
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  color: var(--color-text-muted);
  text-decoration: none;
  letter-spacing: 0.5px;
  text-transform: uppercase;
  transition: color var(--duration-normal) var(--ease-out);
}

.homeLink:hover {
  color: rgb(49, 175, 180); /* Teal color */
}



/* Burger Menu Container */
.burgerMenuContainer {
  display: none; /* Hidden by default (desktop) */
  pointer-events: auto;
  z-index: 1001; /* Above header but below mobile menu overlay */
  flex-shrink: 0; /* Prevent shrinking */
}

.burgerMenuIcon {
  /* Additional styling if needed */
}



/* Variant Styles */
.header.light .homeLink {
  color: var(--color-background-darker);
}

.header.light .homeLink:hover {
  color: var(--color-primary);
}

.header.light.scrolled {
  background: rgba(255, 255, 255, 0.9);
  border-bottom-color: rgba(0, 0, 0, 0.1);
}

/* Responsive Design */
@media (max-width: 1199px) {
  .headerContent {
    padding: var(--space-lg) var(--space-xl);
  }
}

/* Mobile burger menu visibility - only show on mobile */
@media (max-width: 767px) {
  .burgerMenuContainer {
    display: block; /* Show on mobile */
    position: relative; /* Remove absolute positioning */
  }
}

/* Mobile-only responsive adjustments */

@media (max-width: 389px) {
  .headerContent {
    padding: var(--space-md) var(--space-md);
  }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
  .header,
  .headerContent,
  .homeLink,
  .burgerMenuIcon {
    transition: none;
  }
}

/* Focus styles for accessibility */
.homeLink:focus {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
  border-radius: var(--radius-sm);
}

.burgerMenuIcon:focus {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
  border-radius: var(--radius-sm);
}

/* Skip link for accessibility */
.skipLink {
  position: absolute;
  top: -40px;
  left: 6px;
  background: var(--color-primary);
  color: var(--color-text-primary);
  padding: var(--space-sm) var(--space-md);
  text-decoration: none;
  border-radius: var(--radius-sm);
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  z-index: 1001;
  transition: top var(--duration-fast) var(--ease-out);
}

.skipLink:focus {
  top: 6px;
}
</file>

<file path="src/styles/components/Hero.module.css">
.redSquare {
    width: 65px; /* Smaller for mobile portrait */
    height: 65px;
  }
  
  .arrow {
    width: 10px; /* Good size for 4 arrows on mobile portrait */
    height: 10px;
  }/* src/styles/components/Hero.module.css - PRODUCTION READY */

.heroSection {
  position: relative;
  min-height: 100vh;
  background: rgb(20, 33, 45); /* Exact Framer background */
  overflow: hidden;
  display: flex;
  flex-direction: column;
  padding: 0;
}

/* Floating Background Elements - REFINED VERSION */
.floatingBlur1 {
  position: absolute;
  top: 15%;
  right: 12%;
  width: 350px;
  height: 350px;
  background: linear-gradient(135deg, 
    rgba(49, 175, 180, 0.15) 0%,
    rgba(59, 130, 246, 0.12) 50%,
    rgba(6, 182, 212, 0.18) 100%
  );
  border-radius: 50%;
  filter: blur(50px);
  z-index: 1;
  pointer-events: none;
}

.floatingBlur2 {
  position: absolute;
  bottom: 25%;
  left: 8%;
  width: 280px;
  height: 280px;
  background: linear-gradient(45deg, 
    rgba(180, 54, 49, 0.12) 0%,
    rgba(49, 175, 180, 0.08) 100%
  );
  border-radius: 60%;
  filter: blur(45px);
  z-index: 1;
  pointer-events: none;
}

.floatingBlur3 {
  position: absolute;
  top: 45%;
  right: 30%;
  width: 200px;
  height: 200px;
  background: linear-gradient(90deg, 
    rgba(14, 165, 233, 0.1) 0%,
    rgba(49, 175, 180, 0.08) 100%
  );
  border-radius: 40%;
  filter: blur(35px);
  z-index: 1;
  pointer-events: none;
}

/* Additional subtle element for more depth */
.floatingBlur4 {
  position: absolute;
  top: 70%;
  left: 25%;
  width: 150px;
  height: 150px;
  background: linear-gradient(180deg, 
    rgba(6, 182, 212, 0.06) 0%,
    rgba(59, 130, 246, 0.04) 100%
  );
  border-radius: 30%;
  filter: blur(30px);
  z-index: 1;
  pointer-events: none;
}

/* Header Top - HOME only - HIDDEN ON MOBILE */
.headerTop {
  position: absolute;
  top: 40px;
  left: 60px;
  z-index: 100;
}

/* Hide Hero's header on mobile - use Header component instead */
@media (max-width: 1199px) {
  .headerTop {
    display: none; /* Hidden on tablet and mobile */
  }
}

.homeLink {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  font-size: 16px;
  font-weight: 500;
  color: rgba(255, 255, 255, 0.9);
  text-decoration: none;
  letter-spacing: 0.5px;
  text-transform: uppercase;
  transition: color 0.3s ease;
}

.homeLink:hover {
  color: rgb(49, 175, 180);
}

/* Main Content Layout */
.mainContent {
  display: flex;
  flex: 1;
  align-items: center;
  padding: 100px 60px 160px;
  gap: 0;
  position: relative;
  z-index: 2; /* Above background elements */
}

/* DEFINITIVE NAVIGATION FIX - Prevents flex cascade */
.navigationMenu {
  display: flex;
  flex-direction: column;
  gap: 8px;
  flex: 0 0 auto;
  margin-right: auto;
  
  /* CRITICAL: Prevent flex children from affecting each other */
  align-items: flex-start;
}

/* RESPONSIVE NAVIGATION VISIBILITY */
/* Hide navigation on mobile/tablet - Header component handles it */
@media (max-width: 1199px) {
  .navigationMenu {
    display: none; /* Hidden on tablet and mobile */
  }
  
  .headerTop {
    display: none; /* Hidden - Header component handles HOME link */
  }
  
  .mainContent {
    justify-content: center; /* Center hero content when nav is hidden */
    padding-left: 40px; /* Reduce left padding since no nav */
  }
}

/* Show navigation on desktop */
@media (min-width: 1200px) {
  .navigationMenu {
    display: flex; /* Show on desktop */
  }
  
  .headerTop {
    display: block; /* Show HOME link on desktop */
  }
}

/* PRODUCTION NAVIGATION CONTAINER */
.navItemContainer {
  position: relative;
  margin: 0;
  min-height: 65px;
  
  /* CRITICAL: Fixed width prevents flex cascade */
  width: max-content;
  min-width: 280px;
  
  /* Glassmorphism */
  backdrop-filter: blur(20px);
  background: rgba(255, 255, 255, 0.03);
  border-radius: 16px;
  border: 1px solid rgba(255, 255, 255, 0.08);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  
  /* CRITICAL: Prevent flex interference */
  flex-shrink: 0;
  flex-grow: 0;
  flex-basis: auto;
}

/* EXPANDED state - production version */
.navItemContainer.expanded {
  /* Add space for arrow inside the container */
  padding-right: 60px !important;
  
  /* Override hover effects */
  background: rgba(255, 255, 255, 0.03) !important;
  border-color: rgba(255, 255, 255, 0.08) !important;
  
  /* Smooth expansion */
  transition: padding-right 0.3s ease-out, background-color 0.4s ease, border-color 0.4s ease;
}

/* CRITICAL: Hover effects only for non-expanded */
.navItemContainer:not(.expanded):hover {
  background: rgba(255, 255, 255, 0.06);
  border-color: rgba(49, 175, 180, 0.3);
  box-shadow: 
    0 8px 32px rgba(49, 175, 180, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.navLink {
  display: block;
  text-decoration: none;
  position: relative;
  cursor: pointer;
  min-height: 65px;
  border-radius: 16px;
  
  /* CRITICAL: Make link fill the entire container including expanded area */
  width: 100%;
  height: 100%;
  
  /* ONLY visual feedback - no sizing changes */
  transition: transform 0.3s ease;
}

/* CRITICAL: When container is expanded, make link cover the padding area too */
.navItemContainer.expanded .navLink {
  width: calc(100% + 60px) !important; /* Extend into padding area */
}

.navLink:hover {
  transform: translateX(8px);
}

/* PERFECT TEAL BACKGROUND - production ready */
.tealBackground {
  position: absolute;
  top: 0px;
  left: -8px;   /* Perfect left alignment */
  right: 0px;
  bottom: 0px;
  background: linear-gradient(135deg, 
    rgba(49, 175, 180, 0.9) 0%,
    rgba(14, 165, 233, 0.8) 100%
  );
  border-radius: 16px;
  z-index: 2;
  transform-origin: left center;
  transform: scaleX(0); /* Start collapsed */
  transition: transform 0.4s ease-out;
  box-shadow: 
    0 4px 16px rgba(49, 175, 180, 0.4),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

/* PERFECT EXPANSION - production ready */
.navItemContainer:hover .tealBackground,
.navItemContainer.expanded .tealBackground {
  transform: scaleX(0.985) !important; /* Perfect scale */
}

/* Navigation Text */
.navText {
  position: relative;
  z-index: 4; /* Above teal background and arrow */
  font-family: 'Clash Display', 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  font-size: clamp(35px, 5.5vw, 120px);
  font-weight: 400;
  line-height: 0.95;
  color: rgb(255, 255, 255);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  display: block;
  padding: 6px 20px 6px 20px;
  text-transform: uppercase;
  letter-spacing: -0.02em;
  white-space: nowrap;
  
  /* CRITICAL: Don't let text padding affect the parent link size */
  box-sizing: border-box;
}

/* Hovered state - ONLY color change */
.navText.hovered {
  color: rgb(0, 0, 0);
  font-weight: 500;
}

/* Down Arrow - LARGER BOTTOM POSITIONED */
.downArrow {
  position: absolute;
  right: 12px; /* Good spacing from edge */
  bottom: 8px; /* Bottom positioned as you like */
  z-index: 3; /* Above teal background */
  width: 48px; /* Larger container */
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  
  /* NO background - clean arrow */
}

.arrowIcon {
  width: 38px; /* Much larger to be more prominent */
  height: 38px;
  fill: rgb(0, 0, 0); /* Black arrow on teal background */
  color: rgb(0, 0, 0);
  stroke-width: 3; /* Thicker lines */
}

/* Right Content Area - TRULY PUT RED BOX ON LEFT */
.rightContent {
  display: flex;
  flex-direction: row-reverse; /* Text first, then red box on left */
  align-items: center;
  justify-content: flex-end; /* This will put red box on left, text on right */
  gap: 40px; /* Space between red box and text */
  margin-left: auto;
  max-width: 700px;
  position: relative;
}

/* Hero Content - ADJUSTED FOR SIDE-BY-SIDE LAYOUT */
.heroContent {
  text-align: right;
  max-width: 520px; /* Adjusted for side-by-side layout */
  flex-shrink: 1; /* Allow text to shrink if needed */
}

.heroTitle {
  font-family: 'Clash Grotesk', 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  font-size: clamp(36px, 5vw, 58px); /* BALANCED - scaled back 15-20% */
  font-weight: 500; /* Bolder */
  line-height: 1.1;
  color: rgb(255, 255, 255);
  margin-bottom: 28px; /* Adjusted spacing */
  letter-spacing: -0.6px; /* Slightly less tight */
  text-shadow: 0 2px 20px rgba(0, 0, 0, 0.3); /* Subtle depth */
}

.heroDescription {
  font-family: 'Clash Grotesk', 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  font-size: clamp(20px, 3vw, 32px); /* BALANCED - scaled back 15-20% */
  font-weight: 400; /* Slightly bolder */
  line-height: 1.4; /* Better readability */
  color: rgba(255, 255, 255, 0.9); /* Slightly more opaque */
  letter-spacing: -0.2px;
  text-shadow: 0 1px 10px rgba(0, 0, 0, 0.2); /* Subtle depth */
  margin-bottom: 32px; /* Space for CTA button */
}

/* Call-to-Action Button Container */
.ctaContainer {
  display: flex;
  justify-content: flex-end; /* Align buttons to right with text */
  gap: 16px; /* Space between buttons */
  margin-top: 8px;
  flex-wrap: wrap; /* Allow wrapping on very small screens */
}

/* Primary CTA Button - Discuss Your Vision */
.ctaButtonPrimary {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 14px 24px; /* Smaller than original */
  font-family: 'Clash Grotesk', 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  font-size: 16px; /* Slightly smaller */
  font-weight: 500;
  text-decoration: none;
  color: rgb(255, 255, 255); /* WHITE text normally */
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  
  /* Beautiful teal gradient background */
  background: linear-gradient(135deg, 
    rgba(49, 175, 180, 1) 0%,
    rgba(14, 165, 233, 0.95) 100%
  );
  
  /* Subtle shadow and glow */
  box-shadow: 
    0 4px 16px rgba(49, 175, 180, 0.3),
    0 2px 8px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  
  /* Prevent text selection */
  user-select: none;
  -webkit-user-select: none;
}

.ctaButtonPrimary:hover {
  transform: translateY(-2px);
  color: rgb(0, 0, 0); /* BLACK text on hover */
  box-shadow: 
    0 8px 24px rgba(49, 175, 180, 0.4),
    0 4px 12px rgba(0, 0, 0, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.3);
  
  /* Slightly brighter on hover */
  background: linear-gradient(135deg, 
    rgba(49, 175, 180, 1) 0%,
    rgba(14, 165, 233, 1) 100%
  );
}

.ctaButtonPrimary:active {
  transform: translateY(-1px);
  color: rgb(0, 0, 0); /* Keep black text when pressed */
}

/* Secondary CTA Button - Browse Projects */
.ctaButtonSecondary {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 14px 24px; /* Same size as primary */
  font-family: 'Clash Grotesk', 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  font-size: 16px;
  font-weight: 500;
  text-decoration: none;
  color: rgb(255, 255, 255); /* White text */
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  
  /* Transparent background with border */
  background: transparent;
  border: 2px solid rgba(255, 255, 255, 0.2);
  
  /* Subtle shadow */
  box-shadow: 
    0 2px 8px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
  
  /* Prevent text selection */
  user-select: none;
  -webkit-user-select: none;
}

.ctaButtonSecondary:hover {
  transform: translateY(-1px);
  background: rgba(255, 255, 255, 0.1); /* Subtle white background */
  border-color: rgba(255, 255, 255, 0.3);
  box-shadow: 
    0 4px 16px rgba(255, 255, 255, 0.1),
    0 2px 8px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.ctaButtonSecondary:active {
  transform: translateY(0px);
}

/* Red Decorative Square - SMALLER WITH BLACK ARROWS */
.redSquare {
  position: relative;
  width: 80px; /* SMALLER - was 120px */
  height: 80px;
  background: rgb(180, 54, 49);
  border-radius: 12px; /* Proportionally smaller radius */
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1); /* Smaller shadow */
  flex-shrink: 0; /* Don't shrink in flex layout */
  
  /* CONTINUOUS SPINNING ANIMATION */
  animation: spinBox 8s linear infinite;
}

/* Spinning keyframes for the red box */
@keyframes spinBox {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.arrowContainer {
  display: flex;
  flex-direction: column;
  gap: 6px; /* Better spacing for 4 arrows */
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  
  /* COUNTER-ROTATION to keep arrows vertical */
  animation: counterSpin 8s linear infinite;
}

/* Counter-rotation keyframes to keep arrows upright */
@keyframes counterSpin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(-360deg);
  }
}

.arrow {
  width: 14px; /* Good size for 4 arrows */
  height: 14px;
  fill: rgb(255, 255, 255); /* WHITE ARROWS */
  opacity: 0.8;
  
  /* SMOOTH CONVEYOR FLOW - much more subtle */
  animation: smoothFlow 2s ease-in-out infinite;
}

/* Smooth, subtle flowing animation */
@keyframes smoothFlow {
  0%, 100% {
    opacity: 0.8;
    transform: translateY(0px) scale(1);
  }
  50% {
    opacity: 1;
    transform: translateY(-1px) scale(1.05);
  }
}

.arrow:nth-child(1) { 
  opacity: 1; 
  animation-delay: 0s; 
}
.arrow:nth-child(2) { 
  opacity: 0.9; 
  animation-delay: 0.5s; 
}
.arrow:nth-child(3) { 
  opacity: 0.8; 
  animation-delay: 1s; 
}
.arrow:nth-child(4) { 
  opacity: 0.7; 
  animation-delay: 1.5s; 
}

/* Brand Text Container */
.brandContainer {
  position: absolute;
  bottom: 40px;
  left: 0;
  right: 0;
  text-align: center;
  z-index: 10;
  padding: 0 60px;
  transform-origin: center bottom;
}

/* Brand Text with Blue-to-Teal Gradient */
.brandText {
  font-family: 'Clash Display', 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  font-size: clamp(50px, 7.5vw, 180px);
  font-weight: 600;
  line-height: 0.8;
  margin: 0;
  text-transform: uppercase;
  letter-spacing: -0.05em;
  
  /* PREVENT WRAPPING */
  white-space: nowrap;
  overflow: hidden;
  
  /* Enhanced Blue to Teal Gradient with glow */
  background: linear-gradient(90deg, 
    rgb(59, 130, 246) 0%,     /* Blue start */
    rgb(14, 165, 233) 30%,    /* Sky blue */
    rgb(6, 182, 212) 60%,     /* Cyan */
    rgb(49, 175, 180) 100%    /* Creative Current teal */
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  
  /* Subtle glow effect */
  filter: drop-shadow(0 0 20px rgba(49, 175, 180, 0.3));
}

/* RESPONSIVE DESIGN - ENHANCED BREAKPOINTS */

/* Large Desktop (1600px+) */
@media (min-width: 1600px) {
  .navItemContainer {
    min-width: 320px;
  }
  
  .rightContent {
    gap: 50px; /* More space on large screens */
    max-width: 800px;
  }
  
  .redSquare {
    width: 100px; /* Smaller on large screens */
    height: 100px;
    border-radius: 16px;
  }
  
  .arrow {
    width: 16px; /* Good size for 4 arrows on large screens */
    height: 16px;
  }
  
  .brandText {
    font-size: clamp(80px, 8vw, 200px);
    letter-spacing: -0.06em;
  }
}

/* Standard Desktop (1200px - 1599px) */
@media (min-width: 1200px) and (max-width: 1599px) {
  .mainContent {
    padding: 90px 50px 140px;
  }
  
  .navItemContainer {
    min-width: 300px;
  }
  
  .navText {
    font-size: clamp(32px, 4.8vw, 80px);
  }
  
  .rightContent {
    gap: 35px; /* Good spacing for standard desktop */
    max-width: 650px;
  }
  
  .redSquare {
    width: 90px; /* Smaller for standard desktop */
    height: 90px;
    border-radius: 14px;
  }
  
  .arrow {
    width: 15px; /* Good size for 4 arrows on standard desktop */
    height: 15px;
  }
  
  .heroTitle {
    font-size: clamp(30px, 4.2vw, 48px); /* Scaled back 15-20% */
    font-weight: 600; /* Bolder */
    margin-bottom: 18px;
    line-height: 1.1;
  }
  
  .heroDescription {
    font-size: clamp(18px, 2.8vw, 26px); /* Scaled back 15-20% */
    font-weight: 400;
    line-height: 1.35;
    margin-bottom: 28px; /* Space for CTA */
  }
  
  .ctaButtonPrimary,
  .ctaButtonSecondary {
    padding: 12px 20px; /* Slightly smaller on desktop */
    font-size: 15px;
  }
  
  .brandText {
    font-size: clamp(60px, 7vw, 160px);
    letter-spacing: -0.05em;
  }
  
  .brandContainer {
    bottom: 35px;
  }
}

/* Laptop and Medium Desktop Range (900px - 1599px) */
@media (min-width: 900px) and (max-width: 1599px) {
  .heroSection {
    min-height: 100vh;
  }
  
  .mainContent {
    padding: 45px 40px 45px;
    gap: 15px;
  }
  
  .headerTop {
    top: 18px;
    left: 40px;
  }
  
  .homeLink {
    font-weight: 600;
  }
  
  .navItemContainer {
    min-width: 250px;
    min-height: 55px;
    backdrop-filter: blur(15px);
  }
  
  .navItemContainer.expanded {
    padding-right: 50px !important;
  }
  
  /* CRITICAL: Make link cover padding area on laptop */
  .navItemContainer.expanded .navLink {
    width: calc(100% + 50px) !important;
  }
  
  .downArrow {
    right: 10px; /* Good spacing from edge */
    bottom: 6px; /* Bottom positioned */
    width: 44px; /* Larger for laptop */
    height: 44px;
  }
  
  .arrowIcon {
    width: 34px; /* Larger for laptop */
    height: 34px;
    fill: rgb(0, 0, 0);
    color: rgb(0, 0, 0);
    stroke-width: 3; /* Thicker */
  }
  
  .navText {
    font-size: clamp(32px, 4.5vw, 70px);
    font-weight: 400;
    line-height: 0.85;
    padding: 8px 20px 8px 20px;
    color: rgb(255, 255, 255);
  }
  
  .navText.hovered {
    color: rgb(0, 0, 0);
    font-weight: 500;
  }
  
  .navLink {
    min-height: 55px;
  }
  
  .navigationMenu {
    gap: 8px;
  }
  
  .heroTitle {
    font-size: clamp(28px, 3.8vw, 44px); /* Scaled back 15-20% */
    font-weight: 600; /* Bolder */
    margin-bottom: 16px;
    line-height: 1.1;
  }
  
  .heroDescription {
    font-size: clamp(17px, 2.5vw, 24px); /* Scaled back 15-20% */
    font-weight: 400;
    line-height: 1.3;
    margin-bottom: 24px; /* Space for CTA */
  }
  
  .ctaButtonPrimary,
  .ctaButtonSecondary {
    padding: 12px 20px; /* Good size on laptop */
    font-size: 15px;
  }
  
  .rightContent {
    gap: 25px; /* Smaller gap on laptop */
    max-width: 650px;
  }
  
  .redSquare {
    width: 75px; /* Smaller on laptop */
    height: 75px;
    border-radius: 12px;
  }
  
  .arrow {
    width: 13px; /* Good size for 4 arrows on laptop */
    height: 13px;
  }
  
  .arrow {
    width: 18px;
    height: 18px;
  }
  
  .brandContainer {
    bottom: 20px;
    padding: 0 40px;
    transform: scale(1);
  }
  
  .brandText {
    font-size: clamp(45px, 6.5vw, 130px);
    font-weight: 800;
    letter-spacing: -0.04em;
    line-height: 0.75;
  }
  
  .headerTop {
    top: 18px;
    left: 40px;
  }
  
  .homeLink {
    font-weight: 600;
  }
}

/* Tablet Range (810px - 899px) */
@media (min-width: 810px) and (max-width: 899px) {
  .navItemContainer {
    min-width: 220px;
  }
  
  .navText {
    font-size: clamp(32px, 5.5vw, 65px);
    padding: 6px 18px 6px 18px;
  }
  
  .navItemContainer {
    min-height: 55px;
  }
  
  .navLink {
    min-height: 55px;
  }
  
  .rightContent {
    gap: 30px; /* Good spacing for tablet */
    max-width: 600px;
  }
  
  .redSquare {
    width: 70px; /* Smaller for tablet */
    height: 70px;
    border-radius: 10px;
  }
  
  .arrow {
    width: 11px; /* Good size for 4 arrows on tablet */
    height: 11px;
  }
  
  .heroTitle {
    font-size: clamp(26px, 4.2vw, 40px); /* Scaled back 15-20% */
    font-weight: 600;
  }
  
  .heroDescription {
    font-size: clamp(16px, 3vw, 22px); /* Scaled back 15-20% */
    font-weight: 400;
  }
  
  .brandText {
    font-size: clamp(40px, 6vw, 100px);
    letter-spacing: -0.04em;
  }
}

/* Mobile Landscape (480px - 809px) */
@media (max-width: 809px) {
  .mainContent {
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 100px 30px 140px; /* More top padding for Header component */
    gap: 60px;
    justify-content: center; /* Center content since no nav */
  }
  
  .headerTop {
    top: 20px;
    left: 30px;
    display: none; /* Ensure it's hidden */
  }
  
  .navigationMenu {
    order: 2;
    align-items: center;
    display: none; /* Hidden - Header component handles navigation */
  }
  
  .navItemContainer {
    min-width: 200px;
  }
  
  .navItemContainer.expanded {
    padding-right: 50px !important;
  }
  
  /* CRITICAL: Make link cover padding area on mobile */
  .navItemContainer.expanded .navLink {
    width: calc(100% + 50px) !important;
  }
  
  .downArrow {
    right: 8px; /* Good spacing from edge on mobile */
    bottom: 6px; /* Bottom positioned */
    width: 40px; /* Larger for mobile */
    height: 40px;
  }
  
  .arrowIcon {
    width: 30px; /* Larger for mobile */
    height: 30px;
    stroke-width: 3; /* Thicker */
  }
  
  .rightContent {
    order: 1;
    align-items: center;
    max-width: 100%;
  }
  
  .heroContent {
    text-align: center;
  }
  
  .navText {
    font-size: clamp(30px, 7vw, 60px);
    text-align: center;
    padding: 6px 16px 6px 16px;
  }
  
  .brandContainer {
    bottom: 30px;
    padding: 0 30px;
  }
  
  .brandText {
    font-size: clamp(35px, 9vw, 80px);
    letter-spacing: -0.03em;
    white-space: normal;
  }
  
  .redSquare {
    width: 100px;
    height: 100px;
    margin-top: 30px;
  }
}

/* Mobile Portrait (320px - 479px) */
@media (max-width: 480px) {
  .mainContent {
    padding: 60px 20px 120px;
  }
  
  .headerTop {
    top: 16px;
    left: 20px;
  }
  
  .navItemContainer {
    min-width: 180px;
  }
  
  .navText {
    font-size: clamp(26px, 8vw, 45px);
    padding: 4px 12px 4px 12px;
  }
  
  .brandText {
    font-size: clamp(28px, 8vw, 60px);
    letter-spacing: -0.02em;
  }
  
  .heroTitle {
    font-size: clamp(24px, 5vw, 36px); /* Scaled back 15-20% */
    font-weight: 600;
    margin-bottom: 14px;
  }
  
  .heroDescription {
    font-size: clamp(15px, 3.5vw, 22px); /* Scaled back 15-20% */
    font-weight: 400;
    line-height: 1.4;
  }
  
  .brandContainer {
    padding: 0 20px;
  }
}

/* Small Mobile (280px - 319px) */
@media (max-width: 320px) {
  .navItemContainer {
    min-width: 160px;
  }
  
  .redSquare {
    width: 60px; /* Smallest for tiny screens */
    height: 60px;
    border-radius: 8px;
  }
  
  .arrow {
    width: 9px; /* Good size for 4 arrows on tiny screens */
    height: 9px;
  }
  
  .heroTitle {
    font-size: clamp(18px, 6vw, 28px); /* Scaled back 15-20% */
    font-weight: 600;
  }
  
  .heroDescription {
    font-size: clamp(13px, 4vw, 18px); /* Scaled back 15-20% */
    font-weight: 400;
    margin-bottom: 18px; /* Space for CTA */
  }
  
  .ctaButtonPrimary,
  .ctaButtonSecondary {
    padding: 10px 18px; /* Smallest size for tiny screens */
    font-size: 13px;
    border-radius: 10px; /* Slightly smaller radius */
    width: 100%;
    max-width: 160px; /* Compact for tiny screens */
  }
  
  .brandText {
    font-size: clamp(24px, 7vw, 50px);
    letter-spacing: -0.01em;
  }
  
  .navText {
    font-size: clamp(22px, 7vw, 40px);
    padding: 4px 10px 4px 10px;
  }
}

/* High DPI / Retina Displays */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .brandText {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
}

/* Reduced Motion Preferences */
@media (prefers-reduced-motion: reduce) {
  .navLink,
  .homeLink,
  .brandText {
    transition: none;
  }
  
  .tealBackground {
    transition: none;
  }
  
  .downArrow {
    transition: none;
  }
}
</file>

<file path="src/components/sections/Hero.tsx">
// src/components/sections/Hero.tsx - COMPLETE WITH CTA BUTTON
'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import styles from '@/styles/components/Hero.module.css';

const navigationItems = [
  { name: 'WORK', href: '#work-section' },
  { name: 'ABOUT', href: '#about-section' },
  { name: 'SERVICES', href: '#services' },
  { name: 'CONTACT', href: '#footer-background' },
];

export const Hero = () => {
  const [hoveredItem, setHoveredItem] = useState<string | null>(null);

  const handleSmoothScroll = (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {
    e.preventDefault();
    const targetId = href.replace('#', '');
    const targetElement = document.getElementById(targetId);
    
    if (targetElement) {
      targetElement.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  };

  return (
    <motion.header 
      className={styles.heroSection}
      id="hero-section"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.8 }}
    >
      {/* Keep all floating background elements the same */}
      <motion.div 
        className={styles.floatingBlur1}
        animate={{ 
          y: [-10, 10, -10],
          scale: [1, 1.05, 1]
        }}
        transition={{ 
          duration: 8, 
          repeat: Infinity, 
          ease: [0.4, 0, 0.6, 1] 
        }}
      />
      
      <motion.div 
        className={styles.floatingBlur2}
        animate={{ 
          y: [15, -15, 15],
          x: [-5, 5, -5],
          scale: [1, 1.08, 1]
        }}
        transition={{ 
          duration: 10, 
          repeat: Infinity, 
          ease: [0.4, 0, 0.6, 1] 
        }}
      />
      
      <motion.div 
        className={styles.floatingBlur3}
        animate={{ 
          y: [8, -8, 8],
          x: [5, -5, 5],
          scale: [1, 1.1, 1]
        }}
        transition={{ 
          duration: 6, 
          repeat: Infinity, 
          ease: [0.4, 0, 0.6, 1] 
        }}
      />

      <motion.div 
        className={styles.floatingBlur4}
        animate={{ 
          y: [12, -12, 12],
          scale: [1, 1.15, 1]
        }}
        transition={{ 
          duration: 7, 
          repeat: Infinity, 
          ease: [0.4, 0, 0.6, 1] 
        }}
      />

      {/* Header - HOME only */}
      <motion.div 
        className={styles.headerTop}
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.2, duration: 0.6 }}
      >
        <motion.a 
          href="#hero-section" 
          className={styles.homeLink}
          whileHover={{ color: 'var(--color-primary)' }}
          onClick={(e) => handleSmoothScroll(e, '#hero-section')}
        >
          HOME
        </motion.a>
      </motion.div>

      {/* Main Content Container */}
      <div className={styles.mainContent}>
        {/* Left Navigation Menu */}
        <motion.nav 
          className={styles.navigationMenu}
          initial={{ x: -100, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ delay: 0.4, duration: 0.8, type: "spring", stiffness: 200 }}
        >
          {navigationItems.map((item, index) => {
            const isHovered = hoveredItem === `${item.name}-${index}`;
            
            return (
              <motion.div
                key={`${item.name}-${index}`}
                className={`${styles.navItemContainer} ${isHovered ? styles.expanded : ''}`}
                initial={{ y: 50, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ 
                  delay: 0.6 + (index * 0.1), 
                  duration: 0.6,
                  type: "spring",
                  stiffness: 150
                }}
              >
                <motion.a 
                  href={item.href} 
                  className={styles.navLink}
                  onMouseEnter={() => setHoveredItem(`${item.name}-${index}`)}
                  onMouseLeave={() => setHoveredItem(null)}
                  onClick={(e) => handleSmoothScroll(e, item.href)}
                >
                  {/* Teal background inside link but link fills container */}
                  <div className={styles.tealBackground} />
                  
                  {/* Navigation Text */}
                  <span className={`${styles.navText} ${isHovered ? styles.hovered : ''}`}>
                    {item.name}
                  </span>

                  {/* Down Arrow - Part of link so it expands together */}
                  <motion.div 
                    className={styles.downArrow}
                    initial={{ opacity: 0, x: 15, y: 15 }}
                    animate={{ 
                      opacity: isHovered ? 1 : 0,
                      x: isHovered ? 0 : 15,
                      y: isHovered ? 0 : 15
                    }}
                    transition={{ 
                      duration: 0.3, 
                      ease: [0.4, 0, 0.2, 1],
                      delay: isHovered ? 0.3 : 0
                    }}
                  >
                    <svg viewBox="0 0 24 24" className={styles.arrowIcon}>
                      <line x1="12" y1="5" x2="12" y2="19" stroke="currentColor" strokeWidth="3" strokeLinecap="round"/>
                      <polyline points="19,12 12,19 5,12" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round" fill="none"/>
                    </svg>
                  </motion.div>
                </motion.a>
              </motion.div>
            );
          })}
        </motion.nav>

        {/* Right Content Area - WITH CTA BUTTON */}
        <motion.div 
          className={styles.rightContent}
          initial={{ x: 100, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ delay: 0.8, duration: 0.8, type: "spring", stiffness: 200 }}
        >
          {/* Hero Content - WITH CTA BUTTON */}
          <div className={styles.heroContent}>
            <motion.h1 
              className={styles.heroTitle}
              initial={{ y: 30, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 1.0, duration: 0.6 }}
            >
              Where Ideas Take Shape.
            </motion.h1>
            
            <motion.p 
              className={styles.heroDescription}
              initial={{ y: 30, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 1.2, duration: 0.6 }}
            >
              We navigate the digital realm to build stunning websites, intuitive interfaces, and memorable brand experiences that flow seamlessly with your business goals.
            </motion.p>

            {/* Call-to-Action Buttons - Two Options */}
            <motion.div
              className={styles.ctaContainer}
              initial={{ y: 30, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 1.4, duration: 0.6 }}
            >
              <motion.a
                href="#contact"
                className={styles.ctaButtonPrimary}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.98 }}
                transition={{ type: "spring", stiffness: 300, damping: 20 }}
              >
                Discuss Your Vision
              </motion.a>
              
              <motion.a
                href="#work-section"
                className={styles.ctaButtonSecondary}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                transition={{ type: "spring", stiffness: 300, damping: 20 }}
              >
                Browse Projects
              </motion.a>
            </motion.div>
          </div>

          {/* Red Decorative Square with Arrows - POSITIONED ON LEFT */}
          <motion.div 
            className={styles.redSquare}
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 1.6, duration: 0.8, type: "spring" }}
          >
            <div className={styles.arrowContainer}>
              {[...Array(4)].map((_, i) => (
                <svg key={i} viewBox="0 0 256 256" className={styles.arrow}>
                  <path d="M213.66,101.66l-80,80a8,8,0,0,1-11.32,0l-80-80A8,8,0,0,1,53.66,90.34L128,164.69l74.34-74.35a8,8,0,0,1,11.32,11.32Z"/>
                </svg>
              ))}
            </div>
          </motion.div>
        </motion.div>
      </div>

      {/* Bottom Brand Text with Gradient */}
      <motion.div 
        className={styles.brandContainer}
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ delay: 1.8, duration: 0.8, type: "spring" }}
      >
        <h1 className={styles.brandText}>
          CREATIVE CURRENT
        </h1>
      </motion.div>
    </motion.header>
  );
};
</file>

</files>
